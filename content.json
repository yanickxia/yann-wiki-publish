{"pages":[{"title":"About","date":"2021-10-21T06:55:16.548Z","path":"about/index.html","text":"本网站作为 Yanick’s Blog 的支援性网站，将一些记录性质的东西放置于此。"},{"title":"Categories","date":"2021-10-21T06:55:16.548Z","path":"categories/index.html","text":""},{"title":"books","date":"2018-04-23T15:22:05.000Z","path":"books/index.html","text":"TCP/IP 相关 链接: https://pan.baidu.com/s/1tNUZ0m8C3RNLSBtq4fTp8g 密码: bkp5"},{"title":"知识地图","date":"2018-04-19T12:11:20.000Z","path":"map/index.html","text":""},{"title":"Tags","date":"2021-10-21T06:55:16.548Z","path":"tags/index.html","text":""},{"title":"Tools","date":"2023-04-04T13:21:43.143Z","path":"tools/index.html","text":""},{"title":"知识地图","date":"2018-04-19T12:11:20.000Z","path":"map/embed_page/index.html","text":"var mind = { \"meta\": { \"name\": \"Yann\", \"author\": \"me@yannxia.top\", \"version\": \"0.2\" }, \"format\": \"node_array\", \"data\": [ {\"id\":\"root\", \"isroot\":true, \"topic\":\"jsMind\"}, {\"id\":\"easy\", \"parentid\":\"root\", \"topic\":\"Easy\", \"direction\":\"left\"}, {\"id\":\"easy1\", \"parentid\":\"easy\", \"topic\":\"Easy to show\"}, {\"id\":\"easy2\", \"parentid\":\"easy\", \"topic\":\"Easy to edit\"}, {\"id\":\"easy3\", \"parentid\":\"easy\", \"topic\":\"Easy to store\"}, {\"id\":\"easy4\", \"parentid\":\"easy\", \"topic\":\"Easy to embed\"}, {\"id\":\"open\", \"parentid\":\"root\", \"topic\":\"Open Source\", \"expanded\":false, \"direction\":\"right\"}, {\"id\":\"open1\", \"parentid\":\"open\", \"topic\":\"on GitHub\"}, {\"id\":\"open2\", \"parentid\":\"open\", \"topic\":\"BSD License\"}, {\"id\":\"powerful\", \"parentid\":\"root\", \"topic\":\"Powerful\", \"direction\":\"right\"}, {\"id\":\"powerful1\", \"parentid\":\"powerful\", \"topic\":\"Base on Javascript\"}, {\"id\":\"powerful2\", \"parentid\":\"powerful\", \"topic\":\"Base on HTML5\"}, {\"id\":\"powerful3\", \"parentid\":\"powerful\", \"topic\":\"Depends on you\"}, ] }; var options = { container: 'jsmind_container', theme: 'info', editable: false }; var jm = new jsMind(options); jm.show(mind); jm.end_edit();"}],"posts":[{"title":"Chrome 工具选择","date":"2024-03-07T16:27:50.000Z","path":"wiki/tools/chrome/chrome/","text":"Tab 同步Tab Session Manager 心中的白月光是 Workona 可惜是收费的。","tags":[],"categories":[{"name":"tools","slug":"tools","permalink":"http://wiki.yanick.site/categories/tools/"}]},{"title":"Ubuntu Natutius 增加自定义 Action","date":"2023-12-07T16:05:41.000Z","path":"wiki/tips/ubuntu/add-action-for-nautilus/","text":"安装 Actions For Nautilus configuration 1wget https://raw.githubusercontent.com/bassmanitram/actions-for-nautilus/main/dist/actions-for-nautilus_1.6.1_all.deb 配置如下 重启 Nautilus 1nautilus -q","tags":[],"categories":[{"name":"tips","slug":"tips","permalink":"http://wiki.yanick.site/categories/tips/"}]},{"title":"Linux 测速","date":"2023-05-18T10:30:25.000Z","path":"wiki/linux/network/speed-test/","text":"互联网测速123456wget https://raw.github.com/sivel/speedtest-cli/master/speedtest.pychmod a+rx speedtest.pymv speedtest.py /usr/local/bin/speedtestchown root:root /usr/local/bin/speedtestspeedtest 节点间测速12345678sudo apt install iperf# serviceiperf -s# clientiperf -c &lt;SERVER_IP&gt;","tags":[],"categories":[{"name":"linux","slug":"linux","permalink":"http://wiki.yanick.site/categories/linux/"},{"name":"speedtest","slug":"linux/speedtest","permalink":"http://wiki.yanick.site/categories/linux/speedtest/"}]},{"title":"SmartGit 破解记","date":"2023-04-08T17:28:41.000Z","path":"wiki/hack/smartgit/","text":"Version 22仅供学习研究，请支持正版 22 取消了非商业使用的匿名授权有点难顶 下载 Smartgitsmartgit 下载破解补丁SmartGit/SmartSVN/SmartSynchronize 激活方法 直接下载： ecx6 破解 解压 smartgit，然后删除其中的 jar 目录 修改 smartgit.vmoptions 1-javaagent:&lt;破解路径&gt;/smartgit-agent.jar 修改 bin/smartgit.sh1SMARTGIT_JAVA_HOME=&lt;指向JDK11&gt; Version 23新版的 AgentcrackSmartGit","tags":[{"name":"hack","slug":"hack","permalink":"http://wiki.yanick.site/tags/hack/"}],"categories":[{"name":"hack","slug":"hack","permalink":"http://wiki.yanick.site/categories/hack/"}]},{"title":"Python Tips","date":"2023-03-09T15:10:08.000Z","path":"wiki/tips/python/python/","text":"使用 Python 运行一个简单 Web1python -m http.server 8080","tags":[],"categories":[{"name":"tips","slug":"tips","permalink":"http://wiki.yanick.site/categories/tips/"},{"name":"python","slug":"tips/python","permalink":"http://wiki.yanick.site/categories/tips/python/"}]},{"title":"Macos Tips","date":"2023-02-28T15:10:08.000Z","path":"wiki/tips/macos/macos/","text":"pbcopypbcopy 可以将 terimal 中的输出重定向到剪切板中 1echo \"Copy this into Mac's clipboard\" | pbcopy","tags":[],"categories":[{"name":"tips","slug":"tips","permalink":"http://wiki.yanick.site/categories/tips/"},{"name":"macos","slug":"tips/macos","permalink":"http://wiki.yanick.site/categories/tips/macos/"}]},{"title":"Docker Tips","date":"2023-02-28T15:10:08.000Z","path":"wiki/tips/docker/docker/","text":"ofelia - a job scheduler一个基于 Label 的 docker job 工具 12345678910111213141516171819version: \"3\"services: ofelia: image: mcuadros/ofelia:latest depends_on: - nginx command: daemon --docker volumes: - /var/run/docker.sock:/var/run/docker.sock:ro labels: ofelia.job-local.my-test-job.schedule: \"@every 5s\" ofelia.job-local.my-test-job.command: \"date\" nginx: image: nginx labels: ofelia.enabled: \"true\" ofelia.job-exec.datecron.schedule: \"@every 5s\" ofelia.job-exec.datecron.command: \"uname - guacamole一个 SSH 的 Web 平台，不过有个中文问题需要解决，解决的是 guacd 部分，不是 guacamole 部分，参考 快速搭建基于Docker的Guacamole环境并实现中文显示 123456789101112131415161718192021222324guacd: container_name: guacd_compose image: guacamole/guacd restart: always volumes: - $PWD/data/guacd/drive:/drive:rw - $PWD/data/guacd/record:/record:rwguacamole: image: guacamole/guacamole container_name: guacamole_compose depends_on: - mysql environment: GUACD_HOSTNAME: MYSQL_DATABASE: MYSQL_USER: MYSQL_PORT: MYSQL_HOSTNAME: MYSQL_PASSWORD: links: - guacd ports: - 8080/tcp restart: always","tags":[],"categories":[{"name":"tips","slug":"tips","permalink":"http://wiki.yanick.site/categories/tips/"},{"name":"docker","slug":"tips/docker","permalink":"http://wiki.yanick.site/categories/tips/docker/"}]},{"title":"JQ 使用指南","date":"2023-02-18T11:19:25.000Z","path":"wiki/linux/tips/jq/","text":"JQ 是非常强大的 JSON 操作工具 JQ 安装debian: sudo apt-get install jqcentos: sudo dnf install jq JQ 使用 https://stedolan.github.io/jq/tutorial/","tags":[],"categories":[{"name":"linux","slug":"linux","permalink":"http://wiki.yanick.site/categories/linux/"},{"name":"tips","slug":"linux/tips","permalink":"http://wiki.yanick.site/categories/linux/tips/"}]},{"title":"Vscode 搭建开发环境","date":"2023-02-16T16:05:41.000Z","path":"wiki/dev/vscode/","text":"","tags":[],"categories":[{"name":"tips","slug":"tips","permalink":"http://wiki.yanick.site/categories/tips/"}]},{"title":"Curl 使用姿势","date":"2023-02-14T16:05:41.000Z","path":"wiki/tips/curl/","text":"查看详情1curl -v http://t.cn 使用 Curl 管理 CookieSave cookies between two curl requests 1curl -b cookie.txt -c cookie.txt &lt;url&gt;","tags":[],"categories":[{"name":"tips","slug":"tips","permalink":"http://wiki.yanick.site/categories/tips/"}]},{"title":"cmake","date":"2023-02-06T14:28:41.000Z","path":"wiki/cpp/cmake/cmake/","text":"基础用法12345678# 指定 cmake 的最低版本cmake_minimum_required(VERSION 3.12)# cmake 的项目名project(hello)# 定义可执行输出add_executable(hello main.cpp) 添加依赖1234567891011cmake_minimum_required(VERSION 3.12)project(hello)# 增加依赖的子目录add_subdirectory(poco)add_executable(hello main.cpp)# 给项目增加库链接target_link_libraries(hello PUBLIC Poco::Foundation Poco::Zip Poco::Net Poco::Util) # replace `...` by all poco library you use 添加外部目录链接因为外部项目并不在当前目录中，所以需要的一个参数，参考 cmake:用add_subdirectory()添加外部项目文件夹 12345678cmake_minimum_required(VERSION 3.12)project(hello)add_subdirectory(/home/yanick/codes/misc/poco poco.out)add_executable(hello main.cpp)target_link_libraries(hello PUBLIC Poco::Foundation Poco::Zip Poco::Net Poco::Util) # replace `...` by all poco library you use 添加外部依赖我们如果需要依赖一个 github 的 tar 包依赖需要这么完成。 定义需要导入的 cmake 文件，比如 gflag-2.2.2.cmake 1234567891011121314151617181920include(ExternalProject) set(GFLAG_ROOT $&#123;CMAKE_BINARY_DIR&#125;/thirdparty/gflag-2.2.2)set(GFLAG_LIB_DIR $&#123;GFLAG_ROOT&#125;/lib)set(GFLAG_INCLUDE_DIR $&#123;GFLAG_ROOT&#125;/include) set(GFLAG_URL https://github.com/gflags/gflags/archive/v2.2.2.zip)set(GFLAG_CONFIGURE cd $&#123;GFLAG_ROOT&#125;/src/gflag-2.2.2 &amp;&amp; cmake -D CMAKE_INSTALL_PREFIX=$&#123;GFLAG_ROOT&#125; .)set(GFLAG_MAKE cd $&#123;GFLAG_ROOT&#125;/src/gflag-2.2.2 &amp;&amp; make)set(GFLAG_INSTALL cd $&#123;GFLAG_ROOT&#125;/src/gflag-2.2.2 &amp;&amp; make install)set(GFLAG_LIB $&#123;GFLAG_LIB_DIR&#125;/libgflags.a)ExternalProject_Add(gflag-2.2.2 URL $&#123;GFLAG_URL&#125; DOWNLOAD_NAME gflag-2.2.2.zip PREFIX $&#123;GFLAG_ROOT&#125; CONFIGURE_COMMAND $&#123;GFLAG_CONFIGURE&#125; BUILD_COMMAND $&#123;GFLAG_MAKE&#125; INSTALL_COMMAND $&#123;GFLAG_INSTALL&#125;) 在主 CMakeLists.txt 中依赖123456789101112cmake_minimum_required(VERSION 3.5)project(hello)include(gflag-2.2.2.cmake)add_executable(hello main.cpp)# target_link_libraries(hello PUBLIC Poco::Foundation Poco::Zip Poco::Net Poco::Util) # replace `...` by all poco library you usetarget_link_libraries(hello $&#123;GFLAG_LIB&#125;)target_include_directories(hello PRIVATE $&#123;GFLAG_INCLUDE_DIR&#125;)","tags":[{"name":"cpp","slug":"cpp","permalink":"http://wiki.yanick.site/tags/cpp/"},{"name":"cmake","slug":"cmake","permalink":"http://wiki.yanick.site/tags/cmake/"}],"categories":[{"name":"cpp","slug":"cpp","permalink":"http://wiki.yanick.site/categories/cpp/"},{"name":"cmake","slug":"cpp/cmake","permalink":"http://wiki.yanick.site/categories/cpp/cmake/"}]},{"title":"CPP 自学指南","date":"2023-02-03T17:28:41.000Z","path":"wiki/cpp/cpp-tutorial/","text":"本文作为学习 CPP 的学习路径记录 语言学习learncpp 作为学习 CPP 的入门教程是蛮适合的，通读一遍就会对CPP有一个大致的了解。 工具链学习 Cmake","tags":[{"name":"cpp","slug":"cpp","permalink":"http://wiki.yanick.site/tags/cpp/"}],"categories":[{"name":"cpp","slug":"cpp","permalink":"http://wiki.yanick.site/categories/cpp/"}]},{"title":"kubernetes 安装工具指南","date":"2023-02-02T17:31:50.000Z","path":"wiki/k8s/install/","text":"kubernetes 有很多安装工具，这里有几个使用的做点链接记录 KubeSpherekubekey 12345export KKZONE=cncurl -sfL https://get-kk.kubesphere.io | VERSION=v3.0.2 sh -chmod +x kk./kk create cluster 非常的稳定，还有国内的镜像，安装很方便 SealOSsealos 属于越做越差的类型，这里就不推荐了 Kindkind 也是一个非常好的单机k8s 安装工具。 k3sk3s 是一个阉割版本的 k8s，但是本地启动可能有一些组件无法安装，也不知道为什么，还是推荐第一个 12# curl -sfL https://get.k3s.io | sh -curl -sfL https://rancher-mirror.rancher.cn/k3s/k3s-install.sh | INSTALL_K3S_MIRROR=cn sh - minikubeminikube 是社区官方的单机安装版本，非常的简单也很健壮 123curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-darwin-amd64sudo install minikube-darwin-amd64 /usr/local/bin/minikubeminikube start 但是暴露的方式有点复杂，从远端访问比较的麻烦。 kuboardkuboard 一个全图形化的安装系统，感觉如果需要运维大量的机器这个还是蛮适合的，功能强大。 kubeaszkubeasz anisbe 脚本一把嗦。 rancherrancher 使用 rancher 来跑。","tags":[],"categories":[{"name":"kubernetes","slug":"kubernetes","permalink":"http://wiki.yanick.site/categories/kubernetes/"},{"name":"install","slug":"kubernetes/install","permalink":"http://wiki.yanick.site/categories/kubernetes/install/"}]},{"title":"netfilter 速查","date":"2022-09-18T10:30:25.000Z","path":"wiki/linux/network/netfilter/","text":"","tags":[],"categories":[{"name":"linux","slug":"linux","permalink":"http://wiki.yanick.site/categories/linux/"},{"name":"netfilter","slug":"linux/netfilter","permalink":"http://wiki.yanick.site/categories/linux/netfilter/"}]},{"title":"Ubuntu 升级 22.04 故障记录","date":"2022-09-01T11:19:25.000Z","path":"wiki/linux/notes/ubuntu-22-04/","text":"Jenkins JCP 无法连接1BapSshHostConfiguration#connect: Failed to connect session for config 查找了下 stackoverflow 在 /etc/ssh/sshd.confi 增加 1PubkeyAcceptedKeyTypes=+ssh-rsa 即可。 guacamole 无法连接参考 https://www.reddit.com/r/selfhosted/comments/qh7u5x/guacamole_ssh_not_working/ 1HostKeyAlgorithms +ssh-rsa","tags":[],"categories":[{"name":"ubuntu","slug":"ubuntu","permalink":"http://wiki.yanick.site/categories/ubuntu/"},{"name":"22.04","slug":"ubuntu/22-04","permalink":"http://wiki.yanick.site/categories/ubuntu/22-04/"}]},{"title":"桌面图标","date":"2022-09-01T11:19:25.000Z","path":"wiki/linux/tips/desktop/","text":"桌面图标 /usr/share/applications/ ~/.local/share/applications/","tags":[],"categories":[{"name":"desktop","slug":"desktop","permalink":"http://wiki.yanick.site/categories/desktop/"}]},{"title":"MongoDB Tips","date":"2022-08-22T16:09:25.000Z","path":"wiki/database/mongodb/mongodb/","text":"关联查询123456789101112131415161718db.task.aggregate([ &#123; $lookup: &#123; let: &#123; &quot;modeId&quot;:&#123; &quot;$toObjectId&quot;: &quot;$modem&quot; &#125; &#125;, from: &quot;modem&quot;, pipeline: [ &#123; &quot;$match&quot;: &#123; &quot;$expr&quot;: &#123; &quot;$eq&quot;: [ &quot;$_id&quot;, &quot;$$modeId&quot; ] &#125; &#125; &#125; ], as: &quot;output&quot; &#125;&#125;, &#123; $set: &#123; modem_name: &#123; $arrayElemAt: [&quot;$output.name&quot;, 0] &#125; &#125; &#125;,&#123; $project: &#123; output: 0 &#125;&#125;])","tags":[],"categories":[{"name":"database","slug":"database","permalink":"http://wiki.yanick.site/categories/database/"},{"name":"mongodb","slug":"database/mongodb","permalink":"http://wiki.yanick.site/categories/database/mongodb/"}]},{"title":"kubectl tips","date":"2022-08-02T17:31:50.000Z","path":"wiki/k8s/kubectl-tips/","text":"更新 CR Status 字段参考 Update K8s CR Status 强制删除 Namespace参考 force-delete-namespace.sh 123456789101112131415161718#!/usr/bin/env bashset -eset -o pipefailkubectl proxy &amp;proxy_pid=\"$!\"trap 'kill \"$proxy_pid\"' EXITfor ns in $(kubectl get namespace --field-selector=status.phase=Terminating --output=jsonpath=\"&#123;.items[*].metadata.name&#125;\"); do echo \"Removing finalizers from namespace '$ns'...\" curl -H \"Content-Type: application/json\" -X PUT \"127.0.0.1:8001/api/v1/namespaces/$ns/finalize\" -d @- \\ &lt; &lt;(kubectl get namespace \"$ns\" --output=json | jq '.spec = &#123; \"finalizers\": [] &#125;') echo echo \"Force-deleting namespace '$ns'...\" kubectl delete namespace \"$ns\" --force --grace-period=0 --ignore-not-found=truedone","tags":[],"categories":[{"name":"network","slug":"network","permalink":"http://wiki.yanick.site/categories/network/"},{"name":"kubernetes","slug":"network/kubernetes","permalink":"http://wiki.yanick.site/categories/network/kubernetes/"},{"name":"kubectl","slug":"network/kubernetes/kubectl","permalink":"http://wiki.yanick.site/categories/network/kubernetes/kubectl/"}]},{"title":"tmux 使用指南","date":"2022-08-01T11:09:25.000Z","path":"wiki/tools/tmux/","text":"Tmux参考文档 Tmux 使用教程","tags":[],"categories":[{"name":"linux","slug":"linux","permalink":"http://wiki.yanick.site/categories/linux/"},{"name":"tmux","slug":"linux/tmux","permalink":"http://wiki.yanick.site/categories/linux/tmux/"}]},{"title":"SSH Tips","date":"2022-06-29T16:27:50.000Z","path":"wiki/tools/ssh/ssh/","text":"SSH Keep Alive1234# ~/.ssh/configHost * ServerAliveInterval 30 ServerAliveCountMax 2 自动输入密码尝试使用 sshpass 1apt install sshpass 忽略Host Key在第一次访问的时候，需要统一，CI的时候就很麻烦，可以直接忽略 1ssh -o StrictHostKeyChecking=no root@xxx 可以配置到 config 文件内，全局的忽略","tags":[],"categories":[{"name":"tools","slug":"tools","permalink":"http://wiki.yanick.site/categories/tools/"},{"name":"ssh","slug":"tools/ssh","permalink":"http://wiki.yanick.site/categories/tools/ssh/"}]},{"title":"有趣的工具","date":"2022-06-07T15:10:08.000Z","path":"wiki/tools/tools/","text":"terminalizer录制你的 Shell Input","tags":[],"categories":[{"name":"os","slug":"os","permalink":"http://wiki.yanick.site/categories/os/"}]},{"title":"Istio Common","date":"2022-05-25T11:28:41.000Z","path":"wiki/istio/istio-common/","text":"启用 Sidecar12kubectl label namespace default istio-injection=enabled --overwritekubectl get namespace -L istio-injection","tags":[{"name":"isito","slug":"isito","permalink":"http://wiki.yanick.site/tags/isito/"}],"categories":[{"name":"isito","slug":"isito","permalink":"http://wiki.yanick.site/categories/isito/"}]},{"title":"Git","date":"2022-04-27T14:32:50.000Z","path":"wiki/git/git/","text":"Git 无法拉去 Go 私有仓库1git config --global --add url.\"git@xxxxx.org:\".insteadOf \"https://xxxxx.org/\"","tags":[],"categories":[{"name":"java","slug":"java","permalink":"http://wiki.yanick.site/categories/java/"},{"name":"mirros","slug":"java/mirros","permalink":"http://wiki.yanick.site/categories/java/mirros/"}]},{"title":"Maven Mirrors","date":"2022-04-11T14:32:50.000Z","path":"wiki/java/mirros/maven/","text":"Huawei123456789101112131415&lt;repositories&gt; &lt;repository&gt; &lt;id&gt;hw&lt;/id&gt; &lt;name&gt;hw&lt;/name&gt; &lt;url&gt;https://mirrors.huaweicloud.com/repository/maven/&lt;/url&gt; &lt;/repository&gt;&lt;/repositories&gt;&lt;pluginRepositories&gt; &lt;pluginRepository&gt; &lt;id&gt;hw&lt;/id&gt; &lt;name&gt;hw&lt;/name&gt; &lt;url&gt;https://mirrors.huaweicloud.com/repository/maven/&lt;/url&gt; &lt;/pluginRepository&gt;&lt;/pluginRepositories&gt;","tags":[],"categories":[{"name":"java","slug":"java","permalink":"http://wiki.yanick.site/categories/java/"},{"name":"mirros","slug":"java/mirros","permalink":"http://wiki.yanick.site/categories/java/mirros/"}]},{"title":"Ubuntu 必装软件","date":"2022-03-29T15:10:08.000Z","path":"wiki/tools/linux/ubuntu/","text":"AppImageLauncher是否厌恶死了， appimage 程序没有启动 icon 了，试试 AppImageLauncher 真香。 indicator 声音切换器1sudo snap install indicator-sound-switcher 开箱即用的VIMspacevim 1curl -sLf https://spacevim.org/install.sh | bash Terminal 增强版tilix 1apt install tilix terminator 1apt install terminator hyper 1https://hyper.is/ 跨平台是优点，但是吃 GPU，毕竟是 electron 家族的玩意 tabby云同步是真的不错，不过也是 electron 家族","tags":[],"categories":[{"name":"ubuntu","slug":"ubuntu","permalink":"http://wiki.yanick.site/categories/ubuntu/"},{"name":"tools","slug":"ubuntu/tools","permalink":"http://wiki.yanick.site/categories/ubuntu/tools/"}]},{"title":"ZSH 自用安装手册","date":"2022-03-25T13:00:50.000Z","path":"wiki/tools/zsh/zsh/","text":"ZSH 安装12apt install -y git zshsh -c \"$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\" ZSH 配置Split the zshrc file into multiple files 1234567# ~/.zshrc# Load seperated config filesfor conf in \"$HOME/.config/zsh/config.d/\"*.zsh; do source \"$&#123;conf&#125;\"doneunset conf ZSH 插件zsh-autosuggestionsgithub link 1git clone https://github.com/zsh-users/zsh-autosuggestions $&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;/plugins/zsh-autosuggestions ~/.zshrc1234plugins=( # other plugins... zsh-autosuggestions) 推荐配置 1export ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE=&quot;fg=#3f3f3f,bg=#8c8c8c,bold&quot;","tags":[],"categories":[{"name":"tools","slug":"tools","permalink":"http://wiki.yanick.site/categories/tools/"}]},{"title":"Free Site Resource","date":"2022-02-22T16:27:50.000Z","path":"wiki/tools/free/","text":"IP1curl 'https://api.ipify.org?format=json'","tags":[],"categories":[{"name":"tools","slug":"tools","permalink":"http://wiki.yanick.site/categories/tools/"}]},{"title":"SRE 工具箱","date":"2022-01-30T16:27:50.000Z","path":"wiki/tools/sre/","text":"guacamole a client-less remote desktop gateway. It supports standard protocols like VNC, RDP, and SSH over HTML5. github ：临时使用版本，包含了数据，如果使用在 PRD 推荐使用官方的 IMAGE 1234docker run \\ -p 8080:8080 \\ -v &lt;/path/to/config&gt;:/config \\ maxwaldorf/guacamole","tags":[],"categories":[{"name":"tools","slug":"tools","permalink":"http://wiki.yanick.site/categories/tools/"}]},{"title":"网易云音乐 IN Liunux","date":"2021-11-21T16:09:25.000Z","path":"wiki/linux/tips/netese-cloud/","text":"22.04 安装网易云音乐下载链接 12cd /opt/netease/netease-cloud-musicsudo vim ./netease-cloud-music.bash 1234567#!/bin/shHERE=\"$(dirname \"$(readlink -f \"$&#123;0&#125;\")\")\"export LD_LIBRARY_PATH=\"$&#123;HERE&#125;\"/libs:$LD_LIBRARY_PATHexport QT_PLUGIN_PATH=\"$&#123;HERE&#125;\"/pluginsexport QT_QPA_PLATFORM_PLUGIN_PATH=\"$&#123;HERE&#125;\"/plugins/platformscd /lib/x86_64-linux-gnu/exec \"$&#123;HERE&#125;\"/netease-cloud-music $@ 无法播放 无损1https://blog.csdn.net/leibris/article/details/124895824 网易云原因强制缩放1sudo vi /usr/share/applications/netease-cloud-music.desktop 在 Exec 的 %u 前面加 1--force-device-scale-factor=2 使用侧边键控制网易云音乐12345sudo apt install xbindkeys xautomation# 生成默认配置xbindkeys --defaults &gt; $HOME/.xbindkeysrc 添加配置.xbindkeysrc123456#KeyboardPre&quot;dbus-send --print-reply --dest=org.mpris.MediaPlayer2.netease-cloud-music /org/mpris/MediaPlayer2 org.mpris.MediaPlayer2.Player.Previous&quot; b:9 + Release#KeyboardNext&quot;dbus-send --print-reply --dest=org.mpris.MediaPlayer2.netease-cloud-music /org/mpris/MediaPlayer2 org.mpris.MediaPlayer2.Player.Next&quot; b:8 + Release 查看按键编号1xev | grep button","tags":[],"categories":[{"name":"linux","slug":"linux","permalink":"http://wiki.yanick.site/categories/linux/"}]},{"title":"修复系统","date":"2021-11-20T16:09:25.000Z","path":"wiki/linux/tips/repair/","text":"今天遇见2个问题，第一个突然显卡驱动不能安装。 修复 Nv 驱动无法安装的问题1LC_MESSAGES=C dpkg-divert --list '*nvidia-340*' | sed -nre 's/^diversion of (.*) to .*/\\1/p' | xargs -rd'\\n' -n1 -- sudo dpkg-divert --remove\\nsudo apt --fix-broken install 修 /usr/lib/x86_64-linux-gnu/ 缺失1sudo apt-get install --reinstall `dpkg -S /usr/lib/x86_64-linux-gnu/ \\\\n| sed 's/,/ /g' | head -c-28`","tags":[],"categories":[{"name":"linux","slug":"linux","permalink":"http://wiki.yanick.site/categories/linux/"}]},{"title":"Istio 快速构建","date":"2021-11-08T17:28:41.000Z","path":"wiki/istio/istio-build/","text":"build Envoy By docker123456cd /root/go/src/istio.io/git clone https://github.com/istio/proxy.gitcd proxydocker run -it -w /work -v $PWD:/work gcr.io/istio-testing/build-tools-proxy:master-latest bashmake build release参考 istio-release-builder 参考 istio issue istio tools","tags":[{"name":"isito","slug":"isito","permalink":"http://wiki.yanick.site/tags/isito/"}],"categories":[{"name":"isito","slug":"isito","permalink":"http://wiki.yanick.site/categories/isito/"}]},{"title":"自建 Confluence Quick Start","date":"2021-10-21T14:05:25.000Z","path":"wiki/selfhosted/confluence/","text":"Docker 化 ConfluenceDockerfile1234FROM atlassian/confluence-server:7.13# 使用 Mysql，PG 默认不需要ADD mysql-connector-java-8.0.19.jar /opt/atlassian/confluence/lib/ ADD atlassian-agent-v1.3.1/atlassian-agent.jar /opt/atlassian/atlassian-agent.jar atlassian-agent 点此获取 Docker-Composedocker-compose.yml1234567891011121314151617confluence: build: . container_name: confluence depends_on: - mysql environment: JAVA_OPTS: -javaagent:/opt/atlassian/atlassian-agent.jar # 挂入破解插件 JVM_MAXIMUM_MEMORY: 4096m volumes: - /mnt/confluence/data/:/var/atlassian/application-data/confluence/ ports: - \"8090:8090\" logging: driver: \"json-file\" options: max-size: 50m restart: unless-stopped 破解安装Key1a -jar /opt/atlassian/atlassian-agent.jar -p conf -m &lt;YOUR-MAIL&gt; -o &lt;YOUR-ORG&gt; -d -s &lt;YOUR-SEVICE-KEY&gt; 推荐使用 -d 开启 DataCenter 版本，因为 Server 到 2024 年之后就不能用了。 破解软体和上面差不多，只是把 -p 的参数改一下 1java -jar /opt/atlassian/atlassian-agent.jar -p com.mute.confluence.plugins.xTables -m &lt;YOUR-MAIL&gt; -o &lt;YOUR-ORG&gt; -d -s &lt;YOUR-SEVICE-KEY&gt;","tags":[],"categories":[{"name":"selfhosted","slug":"selfhosted","permalink":"http://wiki.yanick.site/categories/selfhosted/"}]},{"title":"Linux 强制重启","date":"2021-10-17T22:09:25.000Z","path":"wiki/linux/linux-force-reboot/","text":"当系统无法使用 shutdown reboot 无法使用的是清空下，我们需要使用另外一种方式进行重启。 12echo 1 &gt; /proc/sys/kernel/sysrq echo b &gt; /proc/sysrq-trigger 1./proc/sys/kernel/sysrq向 sysrq 文件中写入1是为了开启 SysRq 功能。根据 linux/Documentations/sysrq.txt 中所说：SysRq 代表的是 Magic System Request Key。开启了这个功能以后，只要内核没有挂掉，它就会响应你要求的任何操作。但是这需要内核支持(CONFIG_MAGIC_SYSRQ 选项)。向 /proc/sys/kernel/sysrq 中写入0是关闭 SysRq 功能，写入1是开启，其他选项请参考 sysrq.txt。 2./proc/sysrq-trigger立即重新启动计算机:echo “b” &gt; /proc/sysrq-trigger 参考 Linux强制重启","tags":[],"categories":[{"name":"linux","slug":"linux","permalink":"http://wiki.yanick.site/categories/linux/"}]},{"title":"NC 使用指南","date":"2021-06-09T13:09:25.000Z","path":"wiki/linux/nc/","text":"传输文件目标服务器 nc -q0 -lp | tar xvf - 文件所在服务器 tar cvf - dir | nc -q0","tags":[],"categories":[{"name":"linux","slug":"linux","permalink":"http://wiki.yanick.site/categories/linux/"}]},{"title":"监听并打印接收到的数据","date":"2021-05-28T10:30:25.000Z","path":"wiki/linux/network/listen-and-print/","text":"Socat [推荐]1socat -x - TCP-LISTEN:12345,fork,reuseaddr -x: 打印 HEX Ncat1ncat -lk -C --hex-dump ssh-hex.log 12345 -C: Hex Dump","tags":[],"categories":[{"name":"linux","slug":"linux","permalink":"http://wiki.yanick.site/categories/linux/"},{"name":"network","slug":"linux/network","permalink":"http://wiki.yanick.site/categories/linux/network/"}]},{"title":"kubernetes network troubleshooting","date":"2021-04-16T16:27:50.000Z","path":"wiki/k8s/network-troubleshooting/","text":"API 无法访问其他服务最近安装了一个 kube 但是 api server，但是无法访问 mertics server 等组件，经排查 api server 运行在 master 节点上 其他 组件运行在 worker 节点上核心原因是因为 flannel 打开了 DirectRouting 选项，导致了将宿主机网卡作为 host-gw 直接将 二层 数据包转发出去，并没有进行封装，在云上的网络（火山引擎）禁止此转发行为，表现为 api server 访问其他服务都是 timeout","tags":[],"categories":[{"name":"network","slug":"network","permalink":"http://wiki.yanick.site/categories/network/"},{"name":"kubernetes","slug":"network/kubernetes","permalink":"http://wiki.yanick.site/categories/network/kubernetes/"}]},{"title":"Seal VPN Not Working in ubuntu 18+","date":"2021-03-24T16:24:41.000Z","path":"wiki/tips/dns/","text":"12345678Ubuntu18以上无法访问网络的解决办法Ubuntu 18.04 以后，系统预设安装 systemd-resolved，劫持了 /etc/resolve.conf用 symbolic link 指向 /run/systemd/resolve/stub-resolv.confNetworkManager 发现 /etc/resolv.conf 为 symbolic-link, 会忽略我们使用 dnsmasq 的要求。解法:sudo systemctl disable systemd-resolvedsudo rm -f /etc/resolv.conf # manually delete the /etc/resolv.confsudo systemctl reload NetworkManager # NM will regenerate /etc/resolv.conf","tags":[],"categories":[{"name":"tips","slug":"tips","permalink":"http://wiki.yanick.site/categories/tips/"}]},{"title":"计算机缩写之 Call/CC","date":"2021-03-23T17:28:41.000Z","path":"wiki/cs/call/cc/","text":"call/cc 即 call with current continuation，完整的定义是 captures the current continuation, and applies its argument to this continuation continuation 就是程序剩下的部分，举个例子，对于表达式 (+ 4 (+ 1 2)) 来说，(+ 1 2) 这个的剩下来就是如下 1(lambda (v) (+ 4 v)) 对于 4 来说，剩下来就是 1(lambda (v) (+ v (+ 1 2))) 那这个 call/cc 的定义是 12(... (call/cc (lambda (cc) (&lt;body&gt;))) ...) body 是指当前 continuation， cc 就是某个函数。 回到抽象定义来 (call/cc f) ，接受一个 f 而这个 f 的实参是 continuation比如说 ((call/cc f) e2) 对于 f 接受是 continuation，假设当前的 continuation 是一个 c那么current continuation 为 (lambda (c) (c e2)) 这个对于 e2 来说的，加上 f 就会变成 (f (lambda (c) (c e2)))","tags":[{"name":"cs","slug":"cs","permalink":"http://wiki.yanick.site/tags/cs/"},{"name":"call/cc","slug":"call-cc","permalink":"http://wiki.yanick.site/tags/call-cc/"}],"categories":[{"name":"cs","slug":"cs","permalink":"http://wiki.yanick.site/categories/cs/"},{"name":"call/cc","slug":"cs/call-cc","permalink":"http://wiki.yanick.site/categories/cs/call-cc/"}]},{"title":"Rust常见问题","date":"2021-03-22T16:09:25.000Z","path":"wiki/rust/rust/","text":"Failed to authenticate when downloading repositorygit issue 123eval `ssh-agent -s`ssh-addcargo ...","tags":[],"categories":[{"name":"rust","slug":"rust","permalink":"http://wiki.yanick.site/categories/rust/"}]},{"title":"构建与调试 Linux 内核","date":"2021-03-19T16:09:25.000Z","path":"wiki/linux/build-and-debug-kernel-simple/","text":"Linux Kenrel12wget http://mirrors.ustc.edu.cn/kernel.org/linux/kernel/v4.x/linux-4.19.171.tar.gztar -xvf linux-4.19.171.tar.gz Install Build1apt-get install -y libncurses5-dev libssl-dev bison flex libelf-dev gcc make openssl libc6-dev bc CP Old Config1234cp /boot/config-4.19.0-14-amd64 .configmake oldconfig# for debiansed -ri '/CONFIG_SYSTEM_TRUSTED_KEYS/s/=.+/=\"\"/g' .config Build12345make -j8make bzImagemake modulesmake modules_installmake install disable kaslr123vim /etc/default/grub# append nokaslrupdate-grub gdb stub12345vim xxx.vmx // 修改虚拟机的 vmxdebugStub.listen.guest64.remote = \"TRUE\"debugStub.listen.guest64 = \"TRUE\"monitor.debugOnStartGuest64 = \"TRUE\"debugStub.port.guest64 = \"8864\" debugvscode install global 1sudo apt install global vs 安装 global 插件 1rebuild gtage database debug config 123456789101112131415161718192021222324252627282930&#123; \"version\": \"0.2.0\", \"configurations\": [ &#123; \"name\": \"kernel-debug\", \"type\": \"cppdbg\", \"request\": \"launch\", \"miDebuggerServerAddress\": \"127.0.0.1:8864\", \"program\": \"$&#123;workspaceFolder&#125;/vmlinux\", \"args\": [], \"stopAtEntry\": false, \"cwd\": \"$&#123;workspaceFolder&#125;\", \"environment\": [], \"externalConsole\": false, \"logging\": &#123; \"engineLogging\": false &#125;, \"MIMode\": \"gdb\", &#125; ]&#125;``` ### other way参考 [Linux Debug in Qemu](https://wenfh2020.com/2021/06/23/vscode-gdb-debug-linux-kernel/)```bashqemu-system-x86_64 -kernel ../../arch/x86/boot/bzImage -initrd ../rootfs.img -append nokaslr -S -s","tags":[],"categories":[{"name":"linux","slug":"linux","permalink":"http://wiki.yanick.site/categories/linux/"}]},{"title":"SSL 证书查看","date":"2021-03-12T16:09:25.000Z","path":"wiki/linux/rsa/","text":"查看服务器 SSL 证书详情1echo | openssl s_client -showcerts -servername &lt;SERVER_NAME&gt; -connect &lt;ADDRESS&gt; 2&gt;/dev/null | openssl x509 -inform pem -noout -text 查询证书1openssl x509 -in &lt;INPUT.pem&gt; -noout -text 查看 SSL参考 https://security.stackexchange.com/questions/16085/how-to-get-public-key-of-a-secure-webpage? 1openssl s_client -connect the.host.name:443 | openssl x509 -pubkey -noout","tags":[],"categories":[{"name":"linux","slug":"linux","permalink":"http://wiki.yanick.site/categories/linux/"},{"name":"ssl","slug":"linux/ssl","permalink":"http://wiki.yanick.site/categories/linux/ssl/"}]},{"title":"Build & Debug Envoy","date":"2021-03-09T16:09:25.000Z","path":"wiki/envoy/build-debug-envoy/","text":"Debug Compiler首先构建一个可debug的版本 1bazel build -c dbg --spawn_strategy=standalone //source/exe:envoy-static 生成 dSYM进入到 envoy-static 同级目录，执行： 1dsymutil envoy-static -o envoy-static.dSYM DebugDebug By LLDB12345$ lldb envoy-static(lldb) process launch --stop-at-entry -- -c $PATH_TO_CONFIG(lldb) add-dsym envoy-static.dSYM(lldb) breakpoint set --file server.cc --line 147(lldb) continue Debug By Vscodeopen launch.json file and change program to “${workspaceFolder}/bazel-bin/envoy” (lauch.json will open when to start debugging) 1234567891011121314151617181920&#123; // Use IntelliSense to learn about possible attributes. // Hover to view descriptions of existing attributes. // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387 \"version\": \"0.2.0\", \"configurations\": [ &#123; \"name\": \"(lldb) Launch\", \"type\": \"cppdbg\", \"request\": \"launch\", \"program\": \"$&#123;workspaceFolder&#125;/bazel-bin/source/exe/envoy-static\", \"args\": [\"-c\", \"envoy.yaml\"], \"stopAtEntry\": false, \"cwd\": \"$&#123;workspaceFolder&#125;\", \"environment\": [], \"externalConsole\": true, \"MIMode\": \"lldb\" &#125; ]&#125; Debug in ClionGen CMakeList下载 bazel-cmakelists，在envoy目录下运行，生成 CMakeLists.txt。 1./bazel-cmakelists --targets //source/exe:envoy-static --skip_build 参考 Envoy调试指南","tags":[],"categories":[{"name":"envoy","slug":"envoy","permalink":"http://wiki.yanick.site/categories/envoy/"}]},{"title":"Proxy","date":"2021-03-04T16:09:25.000Z","path":"wiki/proxy/proxy/","text":"shadowsocks 代理1docker run -dt --name ss -p 6443:6443 mritd/shadowsocks -s \"-s 0.0.0.0 -p 6443 -m aes-256-cfb -k Dangerous@123\" 参考 README Socket 5 代理1docker run -d --name socket5-proxy -p 80:1080 -e PROXY_USER=root -e PROXY_PASSWORD=Dangerous@123 serjs/go-socks5-proxy No docker12apt-get install dante-server vim /etc/danted.conf 更多参考 https://hub.docker.com/r/mritd/shadowsocks FRP 隧道Server 1docker run --restart=always --network host -d -v /etc/frp/frps.ini:/etc/frp/frps.ini --name frps snowdreamtech/frps Client 1docker run --restart=always --network host -d -v /etc/frp/frpc.ini:/etc/frp/frpc.ini --name frpc snowdreamtech/frpc","tags":[],"categories":[{"name":"proxy","slug":"proxy","permalink":"http://wiki.yanick.site/categories/proxy/"}]},{"title":"Tips","date":"2021-01-24T11:28:41.000Z","path":"wiki/istio/isito-tips/","text":"自定义指标前缀istio 没有将所有的配置项都释放出来，因此我们可以通过 EnvoyFilter 这个 CRD 进行操作 123456789101112131415161718192021kind: EnvoyFilterapiVersion: networking.istio.io/v1alpha3metadata: annotations: name: mysql-stats-settings namespace: wordpressspec: configPatches: - applyTo: NETWORK_FILTER match: context: ANY listener: filterChain: filter: name: envoy.filters.network.mysql_proxy patch: operation: MERGE value: typed_config: \"@type\": \"type.googleapis.com/envoy.extensions.filters.network.mysql_proxy.v3.MySQLProxy\" stat_prefix: egress_mysql Envoy 指标对外暴露istio 没有将所有的指标对外暴露，因此需要额外配置： envoy-stats 1$ kubectl edit configmaps -n istio-system istio 1234567891011121314151617&#123; \"defaultConfig\": &#123; \"discoveryAddress\": \"istiod.istio-system.svc:15012\", \"rootNamespace\": \"istio-system\", \"trustDomain\": \"cluster.local\", \"proxyStatsMatcher\": &#123; \"inclusionRegexps\": [ \".*mysql.*\" ], \"inclusionPrefixes\": [ \"egress_mysql\" ] &#125;, \"meshId\": \"mesh1\", \"enablePrometheusMerge\": true &#125;,&#125;","tags":[{"name":"isito","slug":"isito","permalink":"http://wiki.yanick.site/tags/isito/"}],"categories":[{"name":"isito","slug":"isito","permalink":"http://wiki.yanick.site/categories/isito/"}]},{"title":"OS 初始化工具安装","date":"2021-01-08T15:10:08.000Z","path":"wiki/tools/os/","text":"同参考 Ubuntu 必装软件 PRE镜像源更换USTC MIRROR 生成 ZSH国内12apt install -y git zsh autojumpsh -c \"$(curl -fsSL https://gitee.com/pocmon/ohmyzsh/raw/master/tools/install.sh)\" 全球12apt install -y git zshsh -c \"$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\" ZSH Theme P10K国内1git clone --depth=1 https://gitee.com/romkatv/powerlevel10k.git $&#123;ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom&#125;/themes/powerlevel10k 全球1git clone --depth=1 https://github.com/romkatv/powerlevel10k.git $&#123;ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom&#125;/themes/powerlevel10k Set ZSH_THEME=”powerlevel10k/powerlevel10k” in ~/.zshrc. Update1git -C $&#123;ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom&#125;/themes/powerlevel10k pull ZSH lazyload12git clone https://github.com/qoomon/zsh-lazyload $ZSH_CUSTOM/plugins/zsh-lazyloadplugins+=(zsh-lazyload) ZSH autosuggestions1git clone https://github.com/zsh-users/zsh-autosuggestions $&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;/plugins/zsh-autosuggestions Iterm2 BadgesLink Docker国内tuna123export DOWNLOAD_URL=\"https://mirrors.tuna.tsinghua.edu.cn/docker-ce\"# 如您使用 curlcurl -fsSL https://get.docker.com/ | sh ali1curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun 全球1curl -fsSL https://get.docker.com Docker Compose 这部分不是必须的，在新版的 docker 里面已经增加了 compose 的插件，使用 docker compose 即可。 国内1curl -L https://get.daocloud.io/docker/compose/releases/download/1.27.4/docker-compose-`uname -s`-`uname -m` &gt; /usr/local/bin/docker-compose &amp;&amp; chmod +x /usr/local/bin/docker-compose 全球1curl -L \"https://github.com/docker/compose/releases/download/1.27.4/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose &amp;&amp; chmod +x /usr/local/bin/docker-compose Kube国内1234567apt-get install -y apt-transport-httpscurl https://mirrors.aliyun.com/kubernetes/apt/doc/apt-key.gpg | apt-key add - cat &lt;&lt;EOF &gt;/etc/apt/sources.list.d/kubernetes.listdeb https://mirrors.aliyun.com/kubernetes/apt/ kubernetes-stretch mainEOFapt-get updateapt-get install -y kubectl Jenkins启动 jenkins 之后，访问 ${JENKINS}/pluginManager/advanced 替换 update-center.json 为 1https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json 进入系统的 update 目录更新 1sed -i 's/https:\\/\\/updates.jenkins.io\\/download/https:\\/\\/mirrors.tuna.tsinghua.edu.cn\\/jenkins/g' default.json &amp;&amp; sed -i 's/http:\\/\\/www.google.com/https:\\/\\/www.baidu.com/g' default.json 重启系统${JENKINS}/restart Neofetch打印系统信息。 https://github.com/dylanaraps/neofetch 123456789101112131415161718192021$ neofetch .-/+oossssoo+/-. yanick@yanick-MS-7C94 `:+ssssssssssssssssss+:` --------------------- -+ssssssssssssssssssyyssss+- OS: Ubuntu 20.04.3 LTS x86_64 .ossssssssssssssssssdMMMNysssso. Host: MS-7C94 1.0 /ssssssssssshdmmNNmmyNMMMMhssssss/ Kernel: 5.13.0-39-generic +ssssssssshmydMMMMMMMNddddyssssssss+ Uptime: 9 hours, 29 mins /sssssssshNMMMyhhyyyyhmNMMMNhssssssss/ Packages: 2672 (dpkg), 1 (flatpak), 20 (snap) .ssssssssdMMMNhsssssssssshNMMMdssssssss. Shell: zsh 5.8 +sssshhhyNMMNyssssssssssssyNMMMysssssss+ Resolution: 3840x2160, 3840x2160 ossyNMMMNyMMhsssssssssssssshmmmhssssssso DE: GNOME 3.36.9 ossyNMMMNyMMhsssssssssssssshmmmhssssssso WM: Mutter +sssshhhyNMMNyssssssssssssyNMMMysssssss+ WM Theme: Adwaita .ssssssssdMMMNhsssssssssshNMMMdssssssss. Theme: Yaru [GTK2/3] /sssssssshNMMMyhhyyyyhdNMMMNhssssssss/ Icons: Yaru [GTK2/3] +sssssssssdmydMMMMMMMMddddyssssssss+ Terminal: gnome-terminal /ssssssssssshdmNNNNmyNMMMMhssssss/ CPU: AMD Ryzen 9 5900X (24) @ 3.700GHz .ossssssssssssssssssdMMMNysssso. GPU: NVIDIA GeForce GT 630 OEM -+sssssssssssssssssyyyssss+- Memory: 25039MiB / 64234MiB `:+ssssssssssssssssss+:` .-/+oossssoo+/-.","tags":[],"categories":[{"name":"os","slug":"os","permalink":"http://wiki.yanick.site/categories/os/"}]},{"title":"Gist","date":"2020-11-22T17:28:41.000Z","path":"wiki/gist/gist/","text":"为Kube Object增加Type信息因为 Client-GO 返回的 TypeMeta 永远为 Null，因此需要自己添加 addTypeInformationToObjectsource_code12345678910111213141516171819func addTypeInformationToObject(obj runtime.Object) error &#123; gvks, _, err := scheme.Scheme.ObjectKinds(obj) if err != nil &#123; return fmt.Errorf(\"missing apiVersion or kind and cannot assign it; %w\", err) &#125; for _, gvk := range gvks &#123; if len(gvk.Kind) == 0 &#123; continue &#125; if len(gvk.Version) == 0 || gvk.Version == runtime.APIVersionInternal &#123; continue &#125; obj.GetObjectKind().SetGroupVersionKind(gvk) break &#125; return nil&#125;","tags":[{"name":"gist","slug":"gist","permalink":"http://wiki.yanick.site/tags/gist/"}],"categories":[{"name":"gist","slug":"gist","permalink":"http://wiki.yanick.site/categories/gist/"}]},{"title":"搭建 Istio 开发测试环境","date":"2020-11-03T17:28:41.000Z","path":"wiki/istio/isito-dev-env/","text":"Pilot Discovery构建123456# 下载，检出版本git clone https://github.com/istio/istio.git &amp;&amp; cd istio &amp;&amp; git checkout &lt;YOUR_WANT_ISTIO&gt; # 构建go build pilot/cmd/pilot-discovery 运行为了让我们在本地开发测试 Pilot，首先准备好 kube-config 启动 poilot 1pilot-discovery discovery --kubeconfig ~/.kube/config &lt;默认配置&gt; Pilot Discovery 运行是非常的简单的，比较复杂的是 Agent。 Pilot Agent构建 Proxy12345# 下载并检出git clone https://github.com/istio/proxy.git &amp;&amp; cd proxy# make build_envoymake build_envoy 构建 istio proxy 会遇见各种的问题，有问题可以参考这里 How to build Istio proxy on OSX (Catalina) 构建 Agent12# 构建 agentgo build pilot/cmd/pilot-agent 运行建议在 istio 目录下运行，这里的 #PWD = istio path 创建 envoy 启动模板 123mkdir -p var/lib/istio/envoy/cp tools/packaing/common/envoy_bootstrap.json var/lib/istio/envoy/envoy_bootstrap_tmpl.json 创建 Mesh 配置， mesh.yaml 123456789101112enableTracing: trueingressService: istio-ingressdefaultConfig: connectTimeout: 1s configPath: \"/etc/istio/proxy\" binaryPath: \"&lt;YOUR ENVOY BIN&gt;\" serviceCluster: istio-proxy drainDuration: 2s parentShutdownDuration: 3s proxyAdminPort: 15000 statsdUdpAddress: \"\" discoveryAddress: istiod-remote.istio-system.svc:15012 &lt;建议修改 Host 将 istiod-remote.istio-system.svc 映射到 127.0.0.1&gt; 创建 Kube Token //TODO 运行 istioAgent 123EXTERNAL_ISTIOD=true;CA_ROOT_CA=&lt;ROOT-CA证书，从服务器下载下来&gt;;CA_ADDR=istiod-remote.istio-system.svc:15012;JWT_POLICY=first-party-jwt;ISTIO_META_CLUSTER_ID=Kubernetes;ISTIO_META_DNS_CAPTURE=false;POD_NAME=netshoot-local-test;POD_NAMESPACE=default;SERVICE_ACCOUNT=defaultproxy --meshConfig mesh.yaml 参考 istio-build-server 后记提了一个 Issue 给社区，看看有没有更好的方式进行运行。","tags":[{"name":"isito","slug":"isito","permalink":"http://wiki.yanick.site/tags/isito/"}],"categories":[{"name":"isito","slug":"isito","permalink":"http://wiki.yanick.site/categories/isito/"}]},{"title":"kubectl 远程访问内网中的 kubernetes 集群","date":"2020-11-02T16:27:50.000Z","path":"wiki/k8s/kubectl-in-remote/","text":"拷贝 config将服务器的 /etc/kubernetes/admin.conf 拷贝至本地的 ~/.kube/config 修改服务器地址123456apiVersion: v1clusters:- cluster: certificate-authority-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUN server: https://172.17.43.150:6443 name: kubernetes 将 server 改成你的远程地址 重新生成证书保存kubeadm 配置1kubectl -n kube-system get configmap kubeadm-config -o jsonpath='&#123;.data.ClusterConfiguration&#125;' &gt; kubeadm.yaml 增加可信地址12345678apiServer: extraArgs: authorization-mode: Node,RBAC timeoutForControlPlane: 4m0sapiVersion: kubeadm.k8s.io/v1beta2certificatesDir: /etc/kubernetes/pkiclusterName: kubernetescontrollerManager: &#123;&#125; 修改为 12345678910apiServer: certSANs: - \"&lt;YOUR_IP&gt;\" extraArgs: authorization-mode: Node,RBAC timeoutForControlPlane: 4m0sapiVersion: kubeadm.k8s.io/v1beta2certificatesDir: /etc/kubernetes/pkiclusterName: kubernetescontrollerManager: &#123;&#125; 生成新的证书12345678910111213# 删除 crtmv /etc/kubernetes/pki/apiserver.&#123;crt,key&#125; ~# 生成证书kubeadm init phase certs apiserver --config kubeadm.yaml# 重启 api serverdocker kill $(docker ps | grep kube-apiserver | grep -v pause | awk '&#123;print $1&#125;')# 更新配置kubeadm config migrate --old-config kubeadm.yaml","tags":[],"categories":[{"name":"cncf","slug":"cncf","permalink":"http://wiki.yanick.site/categories/cncf/"},{"name":"kubernetes","slug":"cncf/kubernetes","permalink":"http://wiki.yanick.site/categories/cncf/kubernetes/"}]},{"title":"Isito の Debug","date":"2020-10-29T17:28:41.000Z","path":"wiki/istio/isito-debug/","text":"状态检查最常见的是 istioctl proxy-status 1234567891011istioctl proxy-statusNAME CDS LDS EDS RDS ISTIOD VERSIONdetails-v1-558b8b4b76-qzqsg.default SYNCED SYNCED SYNCED SYNCED istiod-6cf8d4f9cb-wm7x6 1.7.0istio-ingressgateway-66c994c45c-cmb7x.istio-system SYNCED SYNCED SYNCED NOT SENT istiod-6cf8d4f9cb-wm7x6 1.7.0productpage-v1-6987489c74-nc7tj.default SYNCED SYNCED SYNCED SYNCED istiod-6cf8d4f9cb-wm7x6 1.7.0prometheus-7bdc59c94d-hcp59.istio-system SYNCED SYNCED SYNCED SYNCED istiod-6cf8d4f9cb-wm7x6 1.7.0ratings-v1-7dc98c7588-5m6xj.default SYNCED SYNCED SYNCED SYNCED istiod-6cf8d4f9cb-wm7x6 1.7.0reviews-v1-7f99cc4496-rtsqn.default SYNCED SYNCED SYNCED SYNCED istiod-6cf8d4f9cb-wm7x6 1.7.0reviews-v2-7d79d5bd5d-tj6kf.default SYNCED SYNCED SYNCED SYNCED istiod-6cf8d4f9cb-wm7x6 1.7.0reviews-v3-7dbcdcbc56-t8wrx.default SYNCED SYNCED SYNCED SYNCED istiod-6cf8d4f9cb-wm7x6 1.7.0 在 proxy-status 后面加上 可以查看 Diff 信息 Envoy 配置查询Cluster 检查12345678910111213141516171819202122232425$ istioctl proxy-config cluster -n istio-system istio-ingressgateway-7d6874b48f-qxhn5SERVICE FQDN PORT SUBSET DIRECTION TYPE DESTINATION RULEBlackHoleCluster - - - STATICagent - - - STATICdetails.default.svc.cluster.local 9080 - outbound EDS details.defaultistio-ingressgateway.istio-system.svc.cluster.local 80 - outbound EDSistio-ingressgateway.istio-system.svc.cluster.local 443 - outbound EDSistio-ingressgateway.istio-system.svc.cluster.local 15021 - outbound EDSistio-ingressgateway.istio-system.svc.cluster.local 15443 - outbound EDSistiod.istio-system.svc.cluster.local 443 - outbound EDSistiod.istio-system.svc.cluster.local 853 - outbound EDSistiod.istio-system.svc.cluster.local 15010 - outbound EDSistiod.istio-system.svc.cluster.local 15012 - outbound EDSistiod.istio-system.svc.cluster.local 15014 - outbound EDSkube-dns.kube-system.svc.cluster.local 53 - outbound EDSkube-dns.kube-system.svc.cluster.local 9153 - outbound EDSkubernetes.default.svc.cluster.local 443 - outbound EDS...productpage.default.svc.cluster.local 9080 - outbound EDSprometheus_stats - - - STATICratings.default.svc.cluster.local 9080 - outbound EDSreviews.default.svc.cluster.local 9080 - outbound EDSsds-grpc - - - STATICxds-grpc - - - STRICT_DNSzipkin - - - STRICT_DNS listener 检查1234567891011$ istioctl proxy-config listeners productpage-v1-6c886ff494-7vxhs -o json --address 0.0.0.0 --port 9080...\"rds\": &#123; \"configSource\": &#123; \"ads\": &#123;&#125;, \"resourceApiVersion\": \"V3\" &#125;, \"routeConfigName\": \"9080\"&#125;... route 检查12345678910111213141516171819202122232425262728293031323334$ istioctl proxy-config routes productpage-v1-6c886ff494-7vxhs --name 9080 -o json[ &#123; \"name\": \"9080\", \"virtualHosts\": [ &#123; \"name\": \"reviews.default.svc.cluster.local:9080\", \"domains\": [ \"reviews.default.svc.cluster.local\", \"reviews.default.svc.cluster.local:9080\", \"reviews\", \"reviews:9080\", \"reviews.default.svc.cluster\", \"reviews.default.svc.cluster:9080\", \"reviews.default.svc\", \"reviews.default.svc:9080\", \"reviews.default\", \"reviews.default:9080\", \"10.98.88.0\", \"10.98.88.0:9080\" ], \"routes\": [ &#123; \"name\": \"default\", \"match\": &#123; \"prefix\": \"/\" &#125;, \"route\": &#123; \"cluster\": \"outbound|9080||reviews.default.svc.cluster.local\", \"timeout\": \"0s\", &#125; &#125; ]... Envoy管理接口Envoy提供了管理接口，缺省为localhost 的 15000 端口，可以获取 listener，cluster以及完整的配置数据导出功能。 12345678910111213141516171819kubectl exec productpage-v1-6d8bc58dd7-ts8kw -c istio-proxy curl http://127.0.0.1:15000/help /: Admin home page /certs: print certs on machine /clusters: upstream cluster status /config_dump: dump current Envoy configs (experimental) /cpuprofiler: enable/disable the CPU profiler /healthcheck/fail: cause the server to fail health checks /healthcheck/ok: cause the server to pass health checks /help: print out list of admin commands /hot_restart_version: print the hot restart compatibility version /listeners: print listener addresses /logging: query/change logging levels /quitquitquit: exit the server /reset_counters: reset all counters to zero /runtime: print runtime values /runtime_modify: modify runtime values /server_info: print server version/status information /stats: print server stats /stats/prometheus: print server stats in prometheus format","tags":[{"name":"isito","slug":"isito","permalink":"http://wiki.yanick.site/tags/isito/"}],"categories":[{"name":"isito","slug":"isito","permalink":"http://wiki.yanick.site/categories/isito/"}]},{"title":"Debug Linux","date":"2020-09-24T16:24:41.000Z","path":"wiki/os/debug-linux/","text":"Virtualbox装载 Additions1234567sudo mount /dev/cdrom /media/ -o loopcd /mediasudo ./VBoxLinuxAdditions.runreboot 载入12sudo modprobe -a vboxguest vboxsf vboxvideosudo mount -t vboxsf &lt;NAME&gt; /mnt/shared/ #Build debug kenrel12cp /boot/make oldconfig build1make DockerDebian12docker run -it ubuntu:18.04 bashsed -i &apos;s/archive.ubuntu.com/mirrors.ustc.edu.cn/g&apos; /etc/apt/sources.list intall1apt install gcc ARMbuildboot 默认没有 DHCP 记得安装这个才能使用 参考 Setting up Qemu with a tap interface","tags":[],"categories":[{"name":"virtual machine","slug":"virtual-machine","permalink":"http://wiki.yanick.site/categories/virtual-machine/"}]},{"title":"为 QEMU 配置网桥上网","date":"2020-09-24T11:49:34.000Z","path":"wiki/os/qemu/","text":"工具安装12apt-get install bridge-utils # 虚拟网桥工具apt-get install uml-utilities # UML（User-mode linux）工具 配置网桥1234567891011ifconfig &lt;你的网卡名称(能上网的那张)&gt; down # 首先关闭宿主机网卡接口brctl addbr br0 # 添加一座名为 br0 的网桥brctl addif br0 &lt;你的网卡名称&gt; # 在 br0 中添加一个接口brctl stp br0 off # 如果只有一个网桥，则关闭生成树协议brctl setfd br0 1 # 设置 br0 的转发延迟brctl sethello br0 1 # 设置 br0 的 hello 时间ifconfig br0 0.0.0.0 promisc up # 启用 br0 接口ifconfig &lt;你的网卡名称&gt; 0.0.0.0 promisc up # 启用网卡接口dhclient br0 # 从 dhcp 服务器获得 br0 的 IP 地址brctl show br0 # 查看虚拟网桥列表brctl showstp br0 # 查看 br0 的各接口信息 创建 TAP1234tunctl -t tap0 -u &lt;YOUR_ACCOUNT&gt; # 创建一个 tap0 接口，只允许 XXX 用户访问brctl addif br0 tap0 # 在虚拟网桥中增加一个 tap0 接口ifconfig tap0 0.0.0.0 promisc up # 启用 tap0 接口brctl showstp br0 # 显示 br0 的各个接口 启动参数123sudo qemu-system-mipsel -M malta -kernel vmlinux-3.2.0-4-4kc-malta -hda debian_squeeze_mipsel_standard.qcow2 -append \"root=/dev/sda1 console=tty0\" -nographic -net nic -net tap,ifname=tap0,script=no,downscript=no -net nic 表示希望 QEMU 在虚拟机中创建一张虚拟网卡，-net tap 表示连接类型为 TAP，并且指定了网卡接口名称(就是刚才创建的 tap0，相当于把虚拟机接入网桥)。 script 和 downscript 两个选项的作用是告诉 QEMU 在启动系统的时候是否调用脚本自动配置网络环境，如果这两个选项为空，那么 QEMU 启动和退出时会自动选择第一个不存在的 tap 接口(通常是 tap0)为参数，调用脚本 /etc/qemu-ifup 和 /etc/qemu-ifdown。由于我们已经配置完毕，所以这两个参数设置为 no 即可。 Host 转发设置1echo 1 &gt; /proc/sys/net/ipv4/ip_forward VM 内设置假设本机IP为 192.168.142.186，br0 的IP为 172.16.66.128 123ifconfig eth0 upifconfig eth0 192.168.142.187 netmask 255.255.240.0 # 为网卡设置IProute add default gw 192.168.142.186 # 增加路由表 测试一下 12345678910/ # ping -c 4 114.114.114.114PING 114.114.114.114 (114.114.114.114): 56 data bytes64 bytes from 114.114.114.114: seq=0 ttl=128 time=31.034 ms64 bytes from 114.114.114.114: seq=1 ttl=128 time=24.453 ms64 bytes from 114.114.114.114: seq=2 ttl=128 time=20.257 ms64 bytes from 114.114.114.114: seq=3 ttl=128 time=24.996 ms--- 114.114.114.114 ping statistics ---4 packets transmitted, 4 packets received, 0% packet lossround-trip min/avg/max = 20.257/25.185/31.034 ms 参考 QEMU 网络配置一把梭 tap的方式使用qemu建立虚拟机桥接网络","tags":[],"categories":[{"name":"os","slug":"os","permalink":"http://wiki.yanick.site/categories/os/"},{"name":"qemu","slug":"os/qemu","permalink":"http://wiki.yanick.site/categories/os/qemu/"}]},{"title":"常见中间件性能瓶颈","date":"2020-06-27T09:32:50.000Z","path":"wiki/arch/bottleneck/","text":"","tags":[],"categories":[{"name":"architecture","slug":"architecture","permalink":"http://wiki.yanick.site/categories/architecture/"}]},{"title":"inoreader 无法显示图片","date":"2020-06-23T16:27:50.000Z","path":"wiki/tips/inoreader-can-not-show-pic/","text":"解决办法安装 referer control 禁止 inoreader 向第三方站点发送 referrer 参考 inoreader 图片不显示是什么情况","tags":[],"categories":[{"name":"tips","slug":"tips","permalink":"http://wiki.yanick.site/categories/tips/"}]},{"title":"Linux Device Driver 笔记","date":"2020-06-20T16:09:25.000Z","path":"wiki/linux/ldd/","text":"Prepare先下载 Linux 源码，然后准备到开发驱动的必须前置工作 123make oldconfigmake preparemake modules_prepare 编译 Helloworld123git clone https://github.com/vigith/Linux-Device-Drivers.gitmake -C /root/linux-2.6.32.4/ M=`pwd` modules -C: 指定 Linux 源码位置","tags":[],"categories":[{"name":"linux","slug":"linux","permalink":"http://wiki.yanick.site/categories/linux/"}]},{"title":"TCPDUMP","date":"2020-06-20T16:09:25.000Z","path":"wiki/linux/tcpdump/","text":"抓取 HTTP 协议内容 1tcpdump -A -s 0 'tcp port 80 and (((ip[2:2] - ((ip[0]&amp;0xf)&lt;&lt;2)) - ((tcp[12]&amp;0xf0)&gt;&gt;2)) != 0)' 抓取特定来源的HTTP 1tcpdump -A -s 0 'src example.com and tcp port 80 and (((ip[2:2] - ((ip[0]&amp;0xf)&lt;&lt;2)) - ((tcp[12]&amp;0xf0)&gt;&gt;2)) != 0)'","tags":[],"categories":[{"name":"linux","slug":"linux","permalink":"http://wiki.yanick.site/categories/linux/"}]},{"title":"常见虚拟机挂载共享目录问题","date":"2020-06-06T16:27:50.000Z","path":"wiki/virtualmachine/mount-file/","text":"VMware Functions试试这个 1sudo /usr/bin/vmhgfs-fuse .host:/ /mnt/hgfs -o subtype=vmhgfs-fuse,allow_other Virtualbox装载 Additions1234567sudo mount /dev/cdrom /media/ -o loopcd /mediasudo ./VBoxLinuxAdditions.runreboot 载入12sudo modprobe -a vboxguest vboxsf vboxvideosudo mount -t vboxsf &lt;NAME&gt; /mnt/shared/","tags":[],"categories":[{"name":"virtual machine","slug":"virtual-machine","permalink":"http://wiki.yanick.site/categories/virtual-machine/"}]},{"title":"Clion中管理Makefile项目","date":"2020-06-06T16:27:50.000Z","path":"wiki/tools/ide/work-with-makefile-in-clion/","text":"Tut安装 PIP1sudo apt install python-pip install compiledb1pip install compiledb compile db1compiledb -n make install plugin for clionskip open projectCLion will detect the compile_commands.json file and look in there for its project information. You may see it think about it for a few seconds, then show the “Compiler Info” tab on the Build tool window, telling you that everything finished ok (there were any errors or warnings you’ll see them in the “Sync” tab). 参考 Working with Makefiles in CLion using Compilation DB","tags":[],"categories":[{"name":"tools","slug":"tools","permalink":"http://wiki.yanick.site/categories/tools/"},{"name":"ide","slug":"tools/ide","permalink":"http://wiki.yanick.site/categories/tools/ide/"},{"name":"clion","slug":"tools/ide/clion","permalink":"http://wiki.yanick.site/categories/tools/ide/clion/"}]},{"title":"构建与调试 Linux 内核","date":"2020-05-15T16:09:25.000Z","path":"wiki/linux/build-and-debug-kernel/","text":"本文以读者的 Linux 4.19 为构建目标 构建Linux内核安装 GCC1sudo apt install gcc 构建配置1234make menuconfig# 选择 kernel hacking —&gt; [*] compile the kernel with debug info 让其携带调试信息make defconfig 生成配置文件make 编译kernel 准备运行环境因为我们只有一个 Kerenl，我们还需要可以运行的 rootfs 等，最简单的方式是基于已经成熟的 Linux 发行版进行替换内核的方式进行运行。 准备 Ubuntu 镜像在 Virtualbox 中安装 ubuntu server 14.04 增加 kgdb 启动参数在 /etc/default/grub 中增加 kgdb 的启动参数 1kgdbwait kgdboc=ttyS0,115200 sysrq_always_enabled nokaslr 给宿主机增加串口虚拟文件在virtualbox的settings里面选择serial port，勾选enable serial port，之后取消勾选connect to existing pipe/socket。port number、irq、I/O port就使用默认，port mode选择HOST PIPE，下面的目录填上/tmp/serial。 替换我们的内核镜像1make install 最后一步就是直接重启我们的系统，这个时候你会发现系统停留在启动页面了。 连接系统进行调试attach1socat -d -d /tmp/serial PTY gdb12gdb vmlinuxtarget remote /dev/pts/1 回复debug模式1echo g &gt; /dev/sysrq-trigger 参考 Linux Kernel System Debugging, part 1: System Setup Booting a Custom Linux Kernel in QEMU and Debugging It With GDB gcc: error: elf_x86_64: No such file or directory kgdb","tags":[],"categories":[{"name":"linux","slug":"linux","permalink":"http://wiki.yanick.site/categories/linux/"}]},{"title":"Xbindkey","date":"2020-05-04T16:27:50.000Z","path":"wiki/linux/xbindkey/","text":"安装1sudo apt install xbindkeys xautomation wish 配置1xbindkeys --defaults &gt; $HOME/.xbindkeysrc Media Btn12345678\"dbus-send --print-reply --dest=org.mpris.MediaPlayer2.netease-cloud-music /org/mpris/MediaPlayer2 org.mpris.MediaPlayer2.Player.Next\" b:8\"dbus-send --print-reply --dest=org.mpris.MediaPlayer2.netease-cloud-music /org/mpris/MediaPlayer2 org.mpris.MediaPlayer2.Player.PlayPause\" b:2\"dbus-send --print-reply --dest=org.mpris.MediaPlayer2.netease-cloud-music /org/mpris/MediaPlayer2 org.mpris.MediaPlayer2.Player.Previous\" b:9","tags":[],"categories":[{"name":"linux","slug":"linux","permalink":"http://wiki.yanick.site/categories/linux/"},{"name":"usage","slug":"linux/usage","permalink":"http://wiki.yanick.site/categories/linux/usage/"}]},{"title":"Rustup by USTC","date":"2019-11-22T15:10:08.000Z","path":"wiki/tools/rustup/","text":"RUSTUP1RUSTUP_DIST_SERVER=https://mirrors.ustc.edu.cn/rust-static rustup update","tags":[],"categories":[{"name":"tools","slug":"tools","permalink":"http://wiki.yanick.site/categories/tools/"}]},{"title":"容器网络Debug工具箱","date":"2019-11-18T15:10:08.000Z","path":"wiki/tools/net-debug/","text":"Net Tools查询服务内部TCP状态1PATTERN=redis sh -c \"nsenter -t `docker ps | grep $PATTERN | awk '&#123;print $1&#125;' | xargs docker inspect -f '&#123;&#123;.State.Pid&#125;&#125;'` -n netstat -ntuo\" Mac下容器内部访问宿主机网络 Use your internal IP address or connect to the special DNS name host.docker.internal which will resolve to the internal IP address used by the host. 1host.docker.internal 快速启动一个Echo服务1ncat -l 2000 --keep-open --exec \"/bin/cat\" Net Tools Continar推荐使用 netshoot 1234567891011121314151617181920212223apiVersion: v1kind: ReplicationControllermetadata: name: nginxspec: replicas: 2 selector: app: nginx template: metadata: name: nginx labels: app: nginx spec: containers: - name: nginx image: nginx ports: - containerPort: 80 - name: nettool image: nicolaka/netshoot command: [ \"/bin/bash\", \"-c\", \"--\" ] args: [ \"while true; do sleep 30; done;\" ] IPtables将某Port的请求转发到另外一个Port1iptables -t nat -I PREROUTING --src 0/0 --dst 172.17.0.2 -p tcp --dport 2526 -j REDIRECT --to-ports 2000 参考 A tcpdump Tutorial with Examples: 50 Ways to Isolate Traffic","tags":[],"categories":[{"name":"tools","slug":"tools","permalink":"http://wiki.yanick.site/categories/tools/"}]},{"title":"镜像站快速替换","date":"2019-11-06T16:27:50.000Z","path":"wiki/tools/mirrors/","text":"alpine1sed -i 's/dl-cdn.alpinelinux.org/mirrors.ustc.edu.cn/g' /etc/apk/repositories Debian12sudo sed -i 's/deb.debian.org/mirrors.ustc.edu.cn/g' /etc/apt/sources.listsudo sed -i 's|security.debian.org/debian-security|mirrors.ustc.edu.cn/debian-security|g' /etc/apt/sources.list Ubuntu1sudo sed -i 's/archive.ubuntu.com/mirrors.ustc.edu.cn/g' /etc/apt/sources.list","tags":[],"categories":[{"name":"tools","slug":"tools","permalink":"http://wiki.yanick.site/categories/tools/"}]},{"title":"kube 快速安装","date":"2019-10-28T16:27:50.000Z","path":"wiki/k8s/quick-start/","text":"More Faster 方案: KubeKey下载 KubeKey123export KKZONE=cncurl -sfL https://get-kk.kubesphere.io | VERSION=v1.0.1 sh -chmod +x kk 创建配置1./kk create config --with-kubernetes v1.17.9 *安装单集群1./kk create cluster --with-kubernetes v1.17.9 修改配置12345678910111213141516171819202122232425262728293031323334353637383940414243apiVersion: kubekey.kubesphere.io/v1alpha1kind: Clustermetadata: name: samplespec: hosts: - &#123;name: node1, address: 172.16.0.2, internalAddress: 172.16.0.2, port: 8022, user: ubuntu, password: Qcloud@123&#125; # Assume that the default port for SSH is 22, otherwise add the port number after the IP address as above - &#123;name: node2, address: 172.16.0.3, internalAddress: 172.16.0.3, password: Qcloud@123&#125; # the default root user - &#123;name: node3, address: 172.16.0.4, internalAddress: 172.16.0.4, privateKeyPath: \"~/.ssh/id_rsa\"&#125; # password-less login with SSH keys roleGroups: etcd: - node1 master: - node1 - node[2:10] # the nodes from node2, node3,..., to node10 worker: - node1 - node[10:100] controlPlaneEndpoint: domain: lb.kubesphere.local address: \"\" port: 6443 kubernetes: version: v1.17.9 imageRepo: kubesphere clusterName: cluster.local masqueradeAll: false # masqueradeAll tells kube-proxy to SNAT everything if using the pure iptables proxy mode. [Default: false] maxPods: 110 # maxPods is the number of pods that can run on this Kubelet. [Default: 110] nodeCidrMaskSize: 24 # internal network node size allocation. This is the size allocated to each node on your network. [Default: 24] proxyMode: ipvs # mode specifies which proxy mode to use. [Default: ipvs] network: plugin: calico calico: ipipMode: Always # IPIP Mode to use for the IPv4 POOL created at start up. If set to a value other than Never, vxlanMode should be set to \"Never\". [Always | CrossSubnet | Never] [Default: Always] vxlanMode: Never # VXLAN Mode to use for the IPv4 POOL created at start up. If set to a value other than Never, ipipMode should be set to \"Never\". [Always | CrossSubnet | Never] [Default: Never] vethMTU: 1440 # The maximum transmission unit (MTU) setting determines the largest packet size that can be transmitted through your network. [Default: 1440] kubePodsCIDR: 10.233.64.0/18 kubeServiceCIDR: 10.233.0.0/18 registry: registryMirrors: [] insecureRegistries: [] privateRegistry: \"\" addons: [] 安装系统1./kk create cluster -f xxx.yaml 宿主机设置关闭 交换分区1swapoff -a 设置Hostname和host12hostnamectl set-hostname &lt;your-name&gt;vim /etc/hosts 本机搞个VPN &amp; 设置好代理1234export http_proxy=http://naso.yannxia.top:8123export https_proxy=http://naso.yannxia.top:8123export ftp_proxy=http://naso.yannxia.top:8123export no_proxy=localhost,127.0.0.0,127.0.1.1,127.0.1.1,10.0.0.0/8,172.16.0.0/16,192.168.0.0/16,mirrors.aliyun.com 设置Docker代理123456mkdir -p /etc/systemd/system/docker.service.dvim /etc/systemd/system/docker.service.d/http-proxy.conf[Service]Environment=\"HTTP_PROXY=http://naso.yannxia.top:8123/\"Environment=\"NO_PROXY=localhost,127.0.0.0/8,10.0.0.0/8,192.168.0.0/16,172.16.0.0/16,su0d0vi9.mirror.aliyuncs.com\"systemctl daemon-reload &amp;&amp; systemctl restart docker K8s 安装安装Kubadmin1234567apt-get update &amp;&amp; apt-get install -y apt-transport-https curlcurl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -cat &lt;&lt;EOF &gt;/etc/apt/sources.list.d/kubernetes.listdeb http://apt.kubernetes.io/ kubernetes-xenial mainEOFapt-get updateapt-get install -y kubelet kubeadm kubectl 初始化节点1kubeadm init --apiserver-advertise-address 172.16.80.135 --pod-network-cidr=192.168.0.0/16 安装网络插件1kubectl apply -f https://docs.projectcalico.org/v3.11/manifests/calico.yaml","tags":[],"categories":[{"name":"cncf","slug":"cncf","permalink":"http://wiki.yanick.site/categories/cncf/"},{"name":"kubernetes","slug":"cncf/kubernetes","permalink":"http://wiki.yanick.site/categories/cncf/kubernetes/"}]},{"title":"写给 Java 开发者的 Kotlin 教程","date":"2018-08-14T09:32:50.000Z","path":"wiki/links/kotlin/","text":"写给 Java 开发者的 Kotlin 教程 (1) - 概述 写给 Java 开发者的 Kotlin 教程 (2) - 基础语法 写给 Java 开发者的 Kotlin 教程 (3) - 数据类型 写给 Java 开发者的 Kotlin 教程 (4) - 控制流表达式 写给 Java 开发者的 Kotlin 教程 (5) - Null对象与类型安全 写给 Java 开发者的 Kotlin 教程 (6) - 函数基础 写给 Java 开发者的 Kotlin 教程 (7) - 函数高阶 写给 Java 开发者的 Kotlin 教程 (8) - 面向对象 - 基础 写给 Java 开发者的 Kotlin 教程 (9) - 面向对象 - 属性","tags":[],"categories":[{"name":"java","slug":"java","permalink":"http://wiki.yanick.site/categories/java/"},{"name":"kotlin","slug":"java/kotlin","permalink":"http://wiki.yanick.site/categories/java/kotlin/"}]},{"title":"CyclicBarrier 详解","date":"2018-05-25T17:32:50.000Z","path":"wiki/java/cyclic-barrier/","text":"A synchronization aid that allows a set of threads to all wait for each other to reach a common barrier point. CyclicBarriers are useful in programs involving a fixed sized party of threads that must occasionally wait for each other. The barrier is called cyclic because it can be re-used after the waiting threads are released. 如Docs中所言，一个同步的工具能够让所有的线程等到一个集中点再继续执行。 Overview123456public interface Future&lt;V&gt; &#123; boolean cancel(boolean mayInterruptIfRunning); boolean isCancelled(); boolean isDone(); V get() throws InterruptedException, ExecutionException; V get(long timeout, TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException; Future 是一个还算是见的接口，我们看看究竟是怎么实现的。它有多个实现类，我们看下最为重要的 java.util.concurrent.FutureTask TASK STATE我们可以看见这个类最上面就是 12345678private volatile int state;private static final int NEW = 0; //新建private static final int COMPLETING = 1; //结束中private static final int NORMAL = 2; //正常结束private static final int EXCEPTIONAL = 3; //异常结束private static final int CANCELLED = 4; //取消private static final int INTERRUPTING = 5; //中断中private static final int INTERRUPTED = 6; //已中断 这里其实就是这个任务所能够转换的状态，这里的单词都很容易理解，我也添加了备注。在代码的备注中有一个很重要的说明 状态的变化可以是这样的: NEW -&gt; COMPLETING -&gt; NORMAL NEW -&gt; COMPLETING -&gt; EXCEPTIONAL NEW -&gt; CANCELLED NEW -&gt; INTERRUPTING -&gt; INTERRUPTED Get 方法我们来看看最常用的Get方法。 123456public V get() throws InterruptedException, ExecutionException &#123; int s = state; if (s &lt;= COMPLETING) s = awaitDone(false, 0L); return report(s); &#125; 代码很简单，也就是获得当前的状态，我们判断状态如果是 COMPLETING 或者 NEW （这里用 &lt;= ）我们就去等待，其他的情况直接就返回结果。见report函数。 12345678private V report(int s) throws ExecutionException &#123; Object x = outcome; if (s == NORMAL) return (V)x; if (s &gt;= CANCELLED) throw new CancellationException(); throw new ExecutionException((Throwable)x); &#125; 这里也就是根据返回的结果，如果是正常结束就返回，其他就返回异常。我们再来看看 awaitDone 函数 123456789101112131415161718192021222324252627282930313233343536private int awaitDone(boolean timed, long nanos) throws InterruptedException &#123; final long deadline = timed ? System.nanoTime() + nanos : 0L; //➀ WaitNode q = null; boolean queued = false; for (;;) &#123; if (Thread.interrupted()) &#123; //➁ removeWaiter(q); throw new InterruptedException(); &#125; int s = state; if (s &gt; COMPLETING) &#123; //➂ if (q != null) q.thread = null; return s; &#125; else if (s == COMPLETING) //➃ cannot time out yet Thread.yield(); else if (q == null) q = new WaitNode(); else if (!queued) queued = UNSAFE.compareAndSwapObject(this, waitersOffset, q.next = waiters, q); else if (timed) &#123; nanos = deadline - System.nanoTime(); if (nanos &lt;= 0L) &#123; removeWaiter(q); return state; &#125; LockSupport.parkNanos(this, nanos); //➄ &#125; else LockSupport.park(this); //➅ &#125; &#125; 这里的代码就复杂点了，我们从上到下慢慢看起来。➀ 这里如果有超时时间的话，就是一个值，其他的就是0➁ 这里如果运行的线程已经中断了，那我们就直接抛出异常就好了，最简单的部分。➂ 如果结束了，我们需要返回状态即可。➃ 因为我们的任务已经完成了，只是在等待结果导出，所以这里不能再计算超时，我们直接把线程让出来就行。➄ 这里也就是将自己Blocking住需要超时的时间。➅ 如果没有超时的设置，我们就将自己一直Blocking住 那问题又来了，我们什么时候才能够将自己唤醒呢？秘密就在 123456789101112131415161718192021222324private void finishCompletion() &#123; // assert state &gt; COMPLETING; for (WaitNode q; (q = waiters) != null;) &#123; if (UNSAFE.compareAndSwapObject(this, waitersOffset, q, null)) &#123; for (;;) &#123; Thread t = q.thread; if (t != null) &#123; //➀ q.thread = null; LockSupport.unpark(t); &#125; WaitNode next = q.next; if (next == null) //➁ break; q.next = null; // unlink to help gc q = next; &#125; break; &#125; &#125; done(); callable = null; // to reduce footprint &#125; ➀ 在这里我们释放在awaitDone被Blocking的线程，这个时候继续运行下去，如果结果还是没有又会在 awaitDone 中新创建一个 WaitNode 然后被在awaitDone中被释放，直到 ➁ 完全没有任务可言的时候就算是结束。 这里有点绕的原因是因为 ➀ awaitDone 的循环中如果任务没有完成 -&gt; ➁ awaitDone 的当前线程（主线程）被 Blocking -&gt; ➂ finishCompletion 的运行线程（也就是任务的本体）如果任务还没有完成 -&gt; ➃ 唤醒 awaitDone的线程（主线程） -&gt; ➀ 参考资料 彻底理解Java的Future模式","tags":[],"categories":[{"name":"java","slug":"java","permalink":"http://wiki.yanick.site/categories/java/"},{"name":"异步与并发编程","slug":"java/异步与并发编程","permalink":"http://wiki.yanick.site/categories/java/异步与并发编程/"}]},{"title":"阅读回顾模板","date":"2018-05-06T16:13:58.000Z","path":"wiki/learn/book-review/","text":"Q: 简短的描述这本书在说什么？A: Q:这本书的大纲是怎么样构成的？A: Q: 作者细部说了什么，怎么说的？A: Q:这本书说得有道理吗？是全部有道理，还是部分有道理？A: Q: 找出作者在问的问题，或作者想要解决的问题。A: Q: 这本书跟你有什么关系？你从中获得什么？A: 参考资料 如何阅读一本书","tags":[],"categories":[{"name":"technique","slug":"technique","permalink":"http://wiki.yanick.site/categories/technique/"}]},{"title":"服务发现","date":"2018-05-04T16:27:50.000Z","path":"wiki/microservice/service_discovery/","text":"关于服务发现的定义 服务发现 Wiki-Service_discovery 这部分稍微要注意的是服务发现分为 客户端发现模式，服务端发现模式，Eureka 采用的是客户端发现的模式，这样职责单一，对于服务端的要求也不会太高。 关于服务发现的实现 Eureka: Netflix 开源的服务发现，当前的1.0版本有几个问题 全量更新 无一致性保证 非长连接，轮询保证服务健康 Zookeeper: 很多老点的系统会使用这个，优点是有一致性协议保证，缺点也就是不太友好，需要理解它的概念。主要通过虚节点来实现。 etcd: 本质上一个KeyValue的储存，这个也需要自己实现一个轮训的接口。 Consul: 我觉得这是最为完美的方案，有一致性协议保证，consul 自己实现了Client 和 Server SpringCloud对Eureka支持最好，Consul也有支持，其他的就完全需要自己搞一套了。 性能测试其实作为底层服务，性能是需要重要考虑的特性。官网有一个performance。见参考资料 整体看起来 Consul 和 etcd 是接近的，Zoo在大量的节点连接的时候CPU和内存都需要大量的占用，在微服务设计的时候需要考虑。 最后补充一个 Eureka的性能测试 参考资料 performance-of-etcd performance-of-eureka","tags":[],"categories":[{"name":"architecture","slug":"architecture","permalink":"http://wiki.yanick.site/categories/architecture/"},{"name":"microservices","slug":"architecture/microservices","permalink":"http://wiki.yanick.site/categories/architecture/microservices/"}]},{"title":"ClassLoader","date":"2018-05-03T09:32:50.000Z","path":"wiki/java/classloader/","text":"ClassPath CLASSPATH=.;%JAVA_HOME%\\lib;%JAVA_HOME%\\lib\\tools.jar 我们都记得在第一次配置Java的时候，我们需要配置CLASSPATH，Classpath是什么意思呢，其实Classpath就是如同单词的意思一样，Class的路径。我们来看看Java的加载类的机制。 Bootstrap Class Loader – It loads JDK internal classes, typically loads rt.jar and other core classes for example java.lang.* package classes (通常是rt.jar的类，比如lang包下面的那些东西) Extensions Class Loader – It loads classes from the JDK extensions directory, usually $JAVA_HOME/lib/ext directory. （通常加载lib里面的class） System Class Loader – It loads classes from the current classpath that can be set while invoking a program using -cp or -classpath command line options.（加载通过 -cp 传入的地址） 那我们再看 CLASSPATH 原来就是定义rt.jar 和 lib 地址的。 ClassLoader这里就不多说明了，给一个链接即可。java类的加载机制 注意下 双亲委派模型 这个老生常谈的问题 双亲委派模型意义： 系统类防止内存中出现多份同样的字节码 保证Java程序安全稳定运行（防止恶性覆盖系统级别代码） 参考资料 java类的加载机制 Java ClassLoader","tags":[],"categories":[{"name":"java","slug":"java","permalink":"http://wiki.yanick.site/categories/java/"},{"name":"foundation","slug":"java/foundation","permalink":"http://wiki.yanick.site/categories/java/foundation/"}]},{"title":"如何工作","date":"2018-04-24T18:43:08.000Z","path":"wiki/learn/how-to-work/","text":"本来我是不愿意写一个这么大的标题的，但是最近被工作缠身无法自拔，恰好一个同事也无心工作，还是回归下自己对于工作方法论的认知。 原理大部分的讲工作的指导性书籍的核心思想我在这里做一个抽象升华： 把注意力解放出来想要赞成这个观点，第一步就是要承认，我们每一个的注意力是有限的，我们一天能够高效办公/学习的时候是一个浮动不大的值。我们想要把自己的注意力释放到值得投入的事情上，这就是所有的工作指导手册的核心。 实践这里面的方法论就多了点，我个人比较喜欢的是 《尽管去做GTD》 和 《吃掉那只青蛙》。《吃掉那只青蛙》中会涉及更多对于整个职业生涯的规划，而《尽管去做GTD》会更加注重于实践。那实践起来的方式是怎么的。 （1）收集一切引起我们注意力的事情；（2）加工处理后，确定它们的实质以及解决方法；（3）组织整理得出的结论；（4）把它们列为我们行动的选择方案；（5）行动，这就构成了我们生活中的“横向”管理层，随时添加新事务 而在 《吃掉那只青蛙》 更是将工作的步骤分解为 （1）树立目标；（2）精心计划；（3）排出优先级；（4）循序渐进；（5）精益求精； 道理总是类似的，我们都知道我们做事情的时候要心无旁骛，为什么我们在做一件事情的时候还会浪费自己的精力去做其他的事情呢？ 影响注意的原因 觉得手头的事情没意思；（无法从工作中获得乐趣） 觉得手机更有意思；（成为科技的奴隶） 还有其他的事情没做完；（引起我们注意力的事情太多） 生怕错过一切东西；（焦虑感） 显然除了第一点是难以改正的，其他的事情我们都应该从自己的身上找原因。世间的诱惑实在太多，如同在茫茫海洋中，我们只有找到灯塔才能够顺利航行。 反思没有银弹是世界的真理，而GTD只是工作的方法论，不是包治百病的良药。GTD的目标是帮我们完成目标，而不是指明我们究竟应该怎么去找到自己的方向。 最后还是送大家 《诫子书》 夫君子之行，静以修身，俭以养德。非淡泊无以明志，非宁静无以致远。夫学须静也，才须学也，非学无以广才，非志无以成学。淫慢则不能励精，险躁则不能冶性。年与时驰，意与日去，遂成枯落，多不接世，悲守穷庐，将复何及！ 参考资料 吃掉那只青蛙 尽管去做GTD","tags":[],"categories":[{"name":"technique","slug":"technique","permalink":"http://wiki.yanick.site/categories/technique/"}]},{"title":"如何学习","date":"2018-04-18T17:48:58.000Z","path":"wiki/learn/how-to-learn/","text":"重要申明本人只是一个学渣，学习姿势因人而变，切勿盲目模仿。 学习方法首先我们要承认我们学习的是知识和技能，也就是我们学习的是前人既定的一种最佳实践，这种感觉经常在面试的过程中有所体悟。比如Java面试的会问你知道Hashmap的实现，这种类型都是技能和知识，学习这一类型的知识我们是可以通过方法论得到提高的，至于才干部分，我个人觉得可能不仅仅是一个脑力活动也需要外在的关键点。 Holistic Learning (整体学习法)这是国外的一个小哥总结出来的，当然也经过他自己的实践效果还是非凡的。顺序是这样的： 获取：也是划重点，获得知识的要点。 理解：理解知识基本含义，也就是在上下文的含义。 拓展：讲知识与已有的知识关联在一起，从而形成自己的知识网格。 纠错：反思。 应用：讲知识运用，可以是做题，可以是自己写项目。 当然整体的路线也是螺旋上升的，并非是顺序执行的。 刻意练习这个方法论的核心更简单些。不断使用刻意练习的方式提高自己的心理表征 解释 心理表征:心理表征是一种与我们大脑正在思考的某个物体、某个观点、某些信息或者其他任何事物想对应的心理结构，或具体或形象。 有目的的练习具有定义明确的特定目标。定义明确的具体目标，可以有效地用于引导你的练习，这里要把目标分解，并制定一个计划。 有目的的练习是专注的。想要取得进步，至少在练习的时候，必须完全把注意力集中在任务上。 有目的的练习包含反馈。不论在做什么事情，都需要反馈来准确辨别在哪些地方还有不足，以及怎么会存在这些不足。反馈可以是自己经过思考后提出的，也可以是别人给你提出的。 有目的的练习需要走出舒适区。如果你从来不迫使自己走出舒适区，便永远无法进步。 费曼技巧费曼技巧是一种理解知识点的技巧。 其实我觉得费曼技巧其实和小黄鸭调试法都很像，也就是你自己真正搞得清楚的东西才能够将的出来。 我的思考看过很多学习方法论的书，当然我还是坚信没有银弹。 没有一种学习方法是可以一劳永逸的，回到问题的之初，我们学的是技能和知识，都是别人的归纳总结，这些知识之间是有相互关联的，你如果想去了解一个人最好做和他一样的事情，差不多的道理，我们想要学会这样的知识，因为书本之上的知识已经是最终的表现，而推导的过程被隐藏掉了，那我们针对知识的学习过程就应该是 收集证据 分析证据 提出假设 论证假设 的过程，其实也就对应着 获取 理解 纠错 这三个核心，而费曼技巧针对是复杂困难的问题我们如何处理，除此之外刻意练习提出是因为如果我们只是不断的循环没有目标是不行，刻意练习帮我们树立了目标。 当然我也没有多久的实践经验，在后续的实践中，我会给大家更多的反馈。 参考资料 learn-more-study-less 还在按照兴趣选工作 费曼技巧","tags":[],"categories":[{"name":"technique","slug":"technique","permalink":"http://wiki.yanick.site/categories/technique/"}]},{"title":"Future 详解","date":"2018-04-14T09:32:50.000Z","path":"wiki/java/future/","text":"Overview123456public interface Future&lt;V&gt; &#123; boolean cancel(boolean mayInterruptIfRunning); boolean isCancelled(); boolean isDone(); V get() throws InterruptedException, ExecutionException; V get(long timeout, TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException; Future 是一个还算是见的接口，我们看看究竟是怎么实现的。它有多个实现类，我们看下最为重要的 java.util.concurrent.FutureTask TASK STATE我们可以看见这个类最上面就是 12345678private volatile int state;private static final int NEW = 0; //新建private static final int COMPLETING = 1; //结束中private static final int NORMAL = 2; //正常结束private static final int EXCEPTIONAL = 3; //异常结束private static final int CANCELLED = 4; //取消private static final int INTERRUPTING = 5; //中断中private static final int INTERRUPTED = 6; //已中断 这里其实就是这个任务所能够转换的状态，这里的单词都很容易理解，我也添加了备注。在代码的备注中有一个很重要的说明 状态的变化可以是这样的: NEW -&gt; COMPLETING -&gt; NORMAL NEW -&gt; COMPLETING -&gt; EXCEPTIONAL NEW -&gt; CANCELLED NEW -&gt; INTERRUPTING -&gt; INTERRUPTED Get 方法我们来看看最常用的Get方法。 123456public V get() throws InterruptedException, ExecutionException &#123; int s = state; if (s &lt;= COMPLETING) s = awaitDone(false, 0L); return report(s); &#125; 代码很简单，也就是获得当前的状态，我们判断状态如果是 COMPLETING 或者 NEW （这里用 &lt;= ）我们就去等待，其他的情况直接就返回结果。见report函数。 12345678private V report(int s) throws ExecutionException &#123; Object x = outcome; if (s == NORMAL) return (V)x; if (s &gt;= CANCELLED) throw new CancellationException(); throw new ExecutionException((Throwable)x); &#125; 这里也就是根据返回的结果，如果是正常结束就返回，其他就返回异常。我们再来看看 awaitDone 函数 123456789101112131415161718192021222324252627282930313233343536private int awaitDone(boolean timed, long nanos) throws InterruptedException &#123; final long deadline = timed ? System.nanoTime() + nanos : 0L; //➀ WaitNode q = null; boolean queued = false; for (;;) &#123; if (Thread.interrupted()) &#123; //➁ removeWaiter(q); throw new InterruptedException(); &#125; int s = state; if (s &gt; COMPLETING) &#123; //➂ if (q != null) q.thread = null; return s; &#125; else if (s == COMPLETING) //➃ cannot time out yet Thread.yield(); else if (q == null) q = new WaitNode(); else if (!queued) queued = UNSAFE.compareAndSwapObject(this, waitersOffset, q.next = waiters, q); else if (timed) &#123; nanos = deadline - System.nanoTime(); if (nanos &lt;= 0L) &#123; removeWaiter(q); return state; &#125; LockSupport.parkNanos(this, nanos); //➄ &#125; else LockSupport.park(this); //➅ &#125; &#125; 这里的代码就复杂点了，我们从上到下慢慢看起来。➀ 这里如果有超时时间的话，就是一个值，其他的就是0➁ 这里如果运行的线程已经中断了，那我们就直接抛出异常就好了，最简单的部分。➂ 如果结束了，我们需要返回状态即可。➃ 因为我们的任务已经完成了，只是在等待结果导出，所以这里不能再计算超时，我们直接把线程让出来就行。➄ 这里也就是将自己Blocking住需要超时的时间。➅ 如果没有超时的设置，我们就将自己一直Blocking住 那问题又来了，我们什么时候才能够将自己唤醒呢？秘密就在 123456789101112131415161718192021222324private void finishCompletion() &#123; // assert state &gt; COMPLETING; for (WaitNode q; (q = waiters) != null;) &#123; if (UNSAFE.compareAndSwapObject(this, waitersOffset, q, null)) &#123; for (;;) &#123; Thread t = q.thread; if (t != null) &#123; //➀ q.thread = null; LockSupport.unpark(t); &#125; WaitNode next = q.next; if (next == null) //➁ break; q.next = null; // unlink to help gc q = next; &#125; break; &#125; &#125; done(); callable = null; // to reduce footprint &#125; ➀ 在这里我们释放在awaitDone被Blocking的线程，这个时候继续运行下去，如果结果还是没有又会在 awaitDone 中新创建一个 WaitNode 然后被在awaitDone中被释放，直到 ➁ 完全没有任务可言的时候就算是结束。 这里有点绕的原因是因为 ➀ awaitDone 的循环中如果任务没有完成 -&gt; ➁ awaitDone 的当前线程（主线程）被 Blocking -&gt; ➂ finishCompletion 的运行线程（也就是任务的本体）如果任务还没有完成 -&gt; ➃ 唤醒 awaitDone的线程（主线程） -&gt; ➀ 参考资料 彻底理解Java的Future模式","tags":[],"categories":[{"name":"java","slug":"java","permalink":"http://wiki.yanick.site/categories/java/"},{"name":"异步与并发编程","slug":"java/异步与并发编程","permalink":"http://wiki.yanick.site/categories/java/异步与并发编程/"}]}],"categories":[{"name":"tools","slug":"tools","permalink":"http://wiki.yanick.site/categories/tools/"},{"name":"tips","slug":"tips","permalink":"http://wiki.yanick.site/categories/tips/"},{"name":"linux","slug":"linux","permalink":"http://wiki.yanick.site/categories/linux/"},{"name":"speedtest","slug":"linux/speedtest","permalink":"http://wiki.yanick.site/categories/linux/speedtest/"},{"name":"hack","slug":"hack","permalink":"http://wiki.yanick.site/categories/hack/"},{"name":"python","slug":"tips/python","permalink":"http://wiki.yanick.site/categories/tips/python/"},{"name":"macos","slug":"tips/macos","permalink":"http://wiki.yanick.site/categories/tips/macos/"},{"name":"docker","slug":"tips/docker","permalink":"http://wiki.yanick.site/categories/tips/docker/"},{"name":"tips","slug":"linux/tips","permalink":"http://wiki.yanick.site/categories/linux/tips/"},{"name":"cpp","slug":"cpp","permalink":"http://wiki.yanick.site/categories/cpp/"},{"name":"cmake","slug":"cpp/cmake","permalink":"http://wiki.yanick.site/categories/cpp/cmake/"},{"name":"kubernetes","slug":"kubernetes","permalink":"http://wiki.yanick.site/categories/kubernetes/"},{"name":"install","slug":"kubernetes/install","permalink":"http://wiki.yanick.site/categories/kubernetes/install/"},{"name":"netfilter","slug":"linux/netfilter","permalink":"http://wiki.yanick.site/categories/linux/netfilter/"},{"name":"ubuntu","slug":"ubuntu","permalink":"http://wiki.yanick.site/categories/ubuntu/"},{"name":"22.04","slug":"ubuntu/22-04","permalink":"http://wiki.yanick.site/categories/ubuntu/22-04/"},{"name":"desktop","slug":"desktop","permalink":"http://wiki.yanick.site/categories/desktop/"},{"name":"database","slug":"database","permalink":"http://wiki.yanick.site/categories/database/"},{"name":"mongodb","slug":"database/mongodb","permalink":"http://wiki.yanick.site/categories/database/mongodb/"},{"name":"network","slug":"network","permalink":"http://wiki.yanick.site/categories/network/"},{"name":"kubernetes","slug":"network/kubernetes","permalink":"http://wiki.yanick.site/categories/network/kubernetes/"},{"name":"kubectl","slug":"network/kubernetes/kubectl","permalink":"http://wiki.yanick.site/categories/network/kubernetes/kubectl/"},{"name":"tmux","slug":"linux/tmux","permalink":"http://wiki.yanick.site/categories/linux/tmux/"},{"name":"ssh","slug":"tools/ssh","permalink":"http://wiki.yanick.site/categories/tools/ssh/"},{"name":"os","slug":"os","permalink":"http://wiki.yanick.site/categories/os/"},{"name":"isito","slug":"isito","permalink":"http://wiki.yanick.site/categories/isito/"},{"name":"java","slug":"java","permalink":"http://wiki.yanick.site/categories/java/"},{"name":"mirros","slug":"java/mirros","permalink":"http://wiki.yanick.site/categories/java/mirros/"},{"name":"tools","slug":"ubuntu/tools","permalink":"http://wiki.yanick.site/categories/ubuntu/tools/"},{"name":"selfhosted","slug":"selfhosted","permalink":"http://wiki.yanick.site/categories/selfhosted/"},{"name":"network","slug":"linux/network","permalink":"http://wiki.yanick.site/categories/linux/network/"},{"name":"cs","slug":"cs","permalink":"http://wiki.yanick.site/categories/cs/"},{"name":"call/cc","slug":"cs/call-cc","permalink":"http://wiki.yanick.site/categories/cs/call-cc/"},{"name":"rust","slug":"rust","permalink":"http://wiki.yanick.site/categories/rust/"},{"name":"ssl","slug":"linux/ssl","permalink":"http://wiki.yanick.site/categories/linux/ssl/"},{"name":"envoy","slug":"envoy","permalink":"http://wiki.yanick.site/categories/envoy/"},{"name":"proxy","slug":"proxy","permalink":"http://wiki.yanick.site/categories/proxy/"},{"name":"gist","slug":"gist","permalink":"http://wiki.yanick.site/categories/gist/"},{"name":"cncf","slug":"cncf","permalink":"http://wiki.yanick.site/categories/cncf/"},{"name":"kubernetes","slug":"cncf/kubernetes","permalink":"http://wiki.yanick.site/categories/cncf/kubernetes/"},{"name":"virtual machine","slug":"virtual-machine","permalink":"http://wiki.yanick.site/categories/virtual-machine/"},{"name":"qemu","slug":"os/qemu","permalink":"http://wiki.yanick.site/categories/os/qemu/"},{"name":"architecture","slug":"architecture","permalink":"http://wiki.yanick.site/categories/architecture/"},{"name":"ide","slug":"tools/ide","permalink":"http://wiki.yanick.site/categories/tools/ide/"},{"name":"clion","slug":"tools/ide/clion","permalink":"http://wiki.yanick.site/categories/tools/ide/clion/"},{"name":"usage","slug":"linux/usage","permalink":"http://wiki.yanick.site/categories/linux/usage/"},{"name":"kotlin","slug":"java/kotlin","permalink":"http://wiki.yanick.site/categories/java/kotlin/"},{"name":"异步与并发编程","slug":"java/异步与并发编程","permalink":"http://wiki.yanick.site/categories/java/异步与并发编程/"},{"name":"technique","slug":"technique","permalink":"http://wiki.yanick.site/categories/technique/"},{"name":"microservices","slug":"architecture/microservices","permalink":"http://wiki.yanick.site/categories/architecture/microservices/"},{"name":"foundation","slug":"java/foundation","permalink":"http://wiki.yanick.site/categories/java/foundation/"}],"tags":[{"name":"hack","slug":"hack","permalink":"http://wiki.yanick.site/tags/hack/"},{"name":"cpp","slug":"cpp","permalink":"http://wiki.yanick.site/tags/cpp/"},{"name":"cmake","slug":"cmake","permalink":"http://wiki.yanick.site/tags/cmake/"},{"name":"isito","slug":"isito","permalink":"http://wiki.yanick.site/tags/isito/"},{"name":"cs","slug":"cs","permalink":"http://wiki.yanick.site/tags/cs/"},{"name":"call/cc","slug":"call-cc","permalink":"http://wiki.yanick.site/tags/call-cc/"},{"name":"gist","slug":"gist","permalink":"http://wiki.yanick.site/tags/gist/"}]}